{"version":3,"sources":["../../../scripts/directives/ClickOutsideElementDirective.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;AAmBb,MAAM,CAAC,SAAS,CAAC,qBAAqB,EAAE,CACvC,YAAY,EACZ,WAAW,EACX,UAAU,UAAU,EAAE,SAAS,EAAE;AAChC,QAAO;AACN,UAAQ,EAAE,GAAG;AACb,MAAI,EAAE,cAAU,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;;;AAGnC,OAAI,KAAK,CAAC,aAAa,EAAE;AACxB,SAAK,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,UAAU,QAAQ,EAAE;AACrD,SAAI,QAAQ,KAAK,IAAI,EAAE;AACtB,gBAAU,CAAC,UAAU,CAAC,gBAAgB,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;MACnD;KACD,CAAC,CAAC;IACH;;AAED,QAAK,CAAC,GAAG,CAAC,gBAAgB,EAAE,UAAU,KAAK,EAAE,OAAO,EAAE;;AAErD,QAAI,OAAO,KAAK,KAAK,CAAC,GAAG,EAAE;AAC1B,iBAAY,EAAE,CAAC;KACf;IACD,CAAC,CAAC;;AAEH,OAAI,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,EAAE;;AAE/B,KAAC,CAAC,eAAe,EAAE,CAAC;IACpB,CAAC,CAAC;;;;;;;;;AASH,OAAI,YAAY,GAAG,SAAf,YAAY,GAAe;AAC9B,SAAK,CAAC,WAAW,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAC7C,CAAC;;AAEF,YAAS,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;;AAEtC,QAAK,CAAC,GAAG,CAAC,UAAU,EAAE,YAAY;AACjC,aAAS,CAAC,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;IACxC,CAAC,CAAC;GACH;EACD,CAAC;CACF,CACD,CAAC,CAAC","file":"ClickOutsideElementDirective.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc directive\n * @name Directives.clickOutsideElement\n * @restrict A\n *\n * @description This directive is to trigger event when clicking outside the specific element or fields\n *\n * ##Dependencies\n *\n * @example\n * <doc:example>\n *\t<doc:source>\n *\t\t<div click-outside-element =\"expression\" focus-property=\"object\"></div>\n *\t</doc:source>\n * </doc:example>\n */\n/* global plm360 */\nplm360.directive('clickOutsideElement', [\n\t'$rootScope',\n\t'$document',\n\tfunction ($rootScope, $document) {\n\t\treturn {\n\t\t\trestrict: 'A',\n\t\t\tlink: function (scope, elem, attrs) {\n\t\t\t\t// watch for any changes to focus property. If an element gets the focus, then broadcast 'focus-acquired' event.\n\t\t\t\t// this way all other elements decorated with this directive knows it.\n\t\t\t\tif (attrs.focusProperty) {\n\t\t\t\t\tscope.$watch(attrs.focusProperty, function (newValue) {\n\t\t\t\t\t\tif (newValue === true) {\n\t\t\t\t\t\t\t$rootScope.$broadcast('focus-acquired', scope.$id);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tscope.$on('focus-acquired', function (event, scopeId) {\n\t\t\t\t\t// if you are not the one with that has the focus then evaluate the 'clickOutsideElement' expression.\n\t\t\t\t\tif (scopeId !== scope.$id) {\n\t\t\t\t\t\tclickOutside();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\telem.bind('click', function (e) {\n\t\t\t\t\t// Note: This is the main reason, we needed to amend the logic to find click outside the element.\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t});\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc method\n\t\t\t\t * @name Directives.clickOutsideElement#clickOutside\n\t\t\t\t * @methodOf Directives.clickOutsideElement\n\t\t\t\t * @description apply given expression asynchronously.\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tvar clickOutside = function () {\n\t\t\t\t\tscope.$applyAsync(attrs.clickOutsideElement);\n\t\t\t\t};\n\n\t\t\t\t$document.bind('click', clickOutside);\n\n\t\t\t\tscope.$on('$destroy', function () {\n\t\t\t\t\t$document.unbind('click', clickOutside);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n]);\n"]}