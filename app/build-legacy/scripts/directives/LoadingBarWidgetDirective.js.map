{"version":3,"sources":["../../../scripts/directives/LoadingBarWidgetDirective.js"],"names":[],"mappings":"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","file":"LoadingBarWidgetDirective.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc directive\n * @name Directives.loadingBarWidget\n * @restrict E\n *\n * @description This directive is wonderfully fabulously awesome for telling the user it's loading something\n *\n * ##Dependencies\n *\n * @example\n * <doc:example>\n *   <doc:source>\n * \t\t<loadingBarWidget/>\n *   </doc:source>\n * </doc:example>\n */\n/* global plm360 */\nplm360.constant('LoadingBarWidgetConfig', {\n\tDEFAULT_DELAY: 500,\t// the default delay for animations and waiting for requests/responses to stop happening\n\tANIMATION_DURATION_PER_REQUEST: 2000,  // the number of milliseconds for duration of animation per request, eg. 2 requests will be 2 * 2000 = 4000\n\tANIMATION_DURATION_FOR_ERROR: 200 // the number of milliseconds for duration if there's an error\n});\n\nvar loadingBarWidget = plm360.directive('loadingBarWidget', [\n\t'$compile',\n\t'$rootScope',\n\t'$timeout',\n\t'$log',\n\t'GlobalSettings',\n\t'AuthenticationService',\n\t'LoadingBarWidgetConfig',\n\t'EventService',\n\t'_',\n\tfunction ($compile, $rootScope, $timeout, $log, GlobalSettings, AuthenticationService, LoadingBarWidgetConfig, EventService, _) {\n\t\treturn {\n\t\t\trestrict: 'E',\n\t\t\treplace: true,\n\t\t\tscope: true,\n\t\t\ttemplateUrl: 'partials/loadingBar.html',\n\t\t\tlink: function (scope, element, attrs) {\n\n\t\t\t\tvar progressBarElement = angular.element(element);\n\n\t\t\t\tvar pageWidth = document.body.offsetWidth; // total width of the browser\n\n\t\t\t\tvar isLoading = false; // is in the middle of the loading process?\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name Directives.loadingBarWidget#isLogged\n\t\t\t\t * @propertyOf Directives.loadingBarWidget\n\t\t\t\t * @description {boolean} Flag for whether user is logged in\n\t\t\t\t */\n\t\t\t\tscope.isLogged = AuthenticationService.isLogged();\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc method\n\t\t\t\t * @name Directives.loadingBarWidget#completeAnimation\n\t\t\t\t * @methodOf Directives.loadingBarWidget\n\t\t\t\t * @description `private` Handles finishing animation\n\t\t\t\t */\n\t\t\t\tvar completeAnimation = function () {\n\t\t\t\t\tresetLoadingProcess();\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc method\n\t\t\t\t * @name Directives.loadingBarWidget#updateAnimation\n\t\t\t\t * @methodOf Directives.loadingBarWidget\n\t\t\t\t * @description `private` Handles updating animations taking into account current number of requests\n\t\t\t\t */\n\t\t\t\tvar updateAnimation = function (requestsCount) {\n\t\t\t\t\t/* global $ */\n\t\t\t\t\t$(progressBarElement).stop();\n\t\t\t\t\t$(progressBarElement).animate({\n\t\t\t\t\t\twidth: '100%'\n\t\t\t\t\t}, {\n\t\t\t\t\t\tduration: (angular.isDefined(requestsCount) ? (requestsCount * LoadingBarWidgetConfig.ANIMATION_DURATION_PER_REQUEST + LoadingBarWidgetConfig.DEFAULT_DELAY) : LoadingBarWidgetConfig.ANIMATION_DURATION_FOR_ERROR),\n\t\t\t\t\t\tcomplete: function () {\n\t\t\t\t\t\t\tcompleteAnimation();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc method\n\t\t\t\t * @name Directives.loadingBarWidget#resetLoadingProcess\n\t\t\t\t * @methodOf Directives.loadingBarWidget\n\t\t\t\t * @description `private` Resets all loading process (cleaning up timeouts and setting proper flags)\n\t\t\t\t */\n\t\t\t\tvar resetLoadingProcess = function () {\n\t\t\t\t\tisLoading = false; // resets variable, since loading has stopped\n\n\t\t\t\t\t// removes the class that shows the spinner on the cursor\n\t\t\t\t\tangular.element(document.getElementById('wrapper')).removeClass('loading');\n\n\t\t\t\t\tprogressBarElement.css({\n\t\t\t\t\t\twidth: '0%'\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * Listens for data requests\n\t\t\t\t */\n\t\t\t\tEventService.listen('data:request', function (event, args) {\n\t\t\t\t\t// $log.log('__dataRequest', args.requests, args.url, args.requestsArr);\n\t\t\t\t\tscope.isLogged = AuthenticationService.isLogged();\n\n\t\t\t\t\t// runs the loading animation for the first time, avoiding adding classes multiple types\n\t\t\t\t\tif (!isLoading) {\n\t\t\t\t\t\tisLoading = true;\n\n\t\t\t\t\t\t// adds the class to the wrapper that displays a spinner alongside the cursor\n\t\t\t\t\t\tangular.element(document.getElementById('wrapper')).addClass('loading');\n\n\t\t\t\t\t\tupdateAnimation(args.requests);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t/**\n\t\t\t\t * Listens for data responses\n\t\t\t\t */\n\t\t\t\tEventService.listen('data:response', function (event, args) {\n\t\t\t\t\tupdateAnimation(args.requests);\n\t\t\t\t});\n\n\t\t\t\t/**\n\t\t\t\t * Listens for the call to change the state, when everything is loaded (most of the time)\n\t\t\t\t */\n\t\t\t\tEventService.listen('state:change:start', function () {\n\t\t\t\t\tresetLoadingProcess();\n\t\t\t\t});\n\n\t\t\t\t/**\n\t\t\t\t * Listens for the call to change the state, mid-change (i.e. in-between the start and sucess)\n\t\t\t\t */\n\t\t\t\tEventService.listen('state:change:switch', function () {\n\t\t\t\t\t// reset the loading process, in case user navigates away in the middle of loading process, hence interrupting\n\t\t\t\t\tresetLoadingProcess();\n\t\t\t\t});\n\n\t\t\t\t/**\n\t\t\t\t * Listens for the successfully changing the state\n\t\t\t\t */\n\t\t\t\tEventService.listen('state:change:done', function () {});\n\n\t\t\t\t/**\n\t\t\t\t * Listens for the error when attempting to change the state\n\t\t\t\t */\n\t\t\t\tEventService.listen('state:change:error', function () {\n\t\t\t\t\tupdateAnimation();\n\t\t\t\t});\n\n\t\t\t\t/**\n\t\t\t\t * Listens for login\n\t\t\t\t */\n\t\t\t\t$rootScope.$on('__logging', function () {\n\t\t\t\t\tscope.isLogged = AuthenticationService.isLogged();\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n]);\n"]}