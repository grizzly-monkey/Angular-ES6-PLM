{"version":3,"sources":["../../../scripts/directives/AdjustMaxHeightDirective.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;AAuBb,MAAM,CAAC,SAAS,CAAC,iBAAiB,EAAE,CACnC,SAAS,EACT,WAAW,EACX,UAAU,OAAO,EAAE,SAAS,EAAE;;;;;;;;;;;;;AAa7B,UAAS,oBAAoB,CAAC,eAAe,EAAE,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE;AAC/E,MAAI,SAAS,GAAG,MAAM,GAAG,UAAU,CAAC;AACpC,MAAI,WAAW,CAAC;AAChB,MAAI,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;AACnC,cAAW,GAAG,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC;GAChD,MAAM;AACN,cAAW,GAAG,SAAS,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC;GACpD;AACD,MAAI,aAAa,CAAC;;;AAGlB,MAAI,SAAS,GAAG,WAAW,EAAE;AAC5B,gBAAa,GAAG,SAAS,GAAG,WAAW,CAAC;GACxC,MAAM;AACN,gBAAa,GAAG,CAAC,CAAC;GAClB;;AAED,iBAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC;AACrE,iBAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC;EAC3C;;AAED,QAAO;AACN,UAAQ,EAAE,GAAG;AACb,OAAK,EAAE,KAAK;AACZ,MAAI,EAAE,cAAU,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BtC,OAAI,cAAc,GAAG,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG,KAAK,CAAC,eAAe,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACjH,OAAI,UAAU,GAAG,KAAK,CAAC,UAAU,IAAI,IAAI,CAAC;;;;;AAK1C,iBAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY;AACzC,wBAAoB,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;AACvE,QAAI,KAAK,CAAC,qBAAqB,EAAE;AAChC,UAAK,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;KACrC;IACD,CAAC,CAAC;;;;;AAKH,QAAK,CAAC,QAAQ,CAAC,4BAA4B,EAAE,YAAY;AACxD,wBAAoB,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;AACvE,QAAI,KAAK,CAAC,qBAAqB,EAAE;AAChC,UAAK,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;KACrC;IACD,CAAC,CAAC;;;;;;;;;;AAUH,YAAS,SAAS,GAAG;AACpB,QAAI,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,GACjD,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC;AAC9C,WAAO,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,eAAe,CAAC,GAC9C,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,SAAS,CAAC;IACxD;;AAED,QAAK,CAAC,GAAG,CAAC,UAAU,EAAE,YAAY;AACjC,kBAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC,CAAC;GACH;EACD,CAAC;CACF,CACD,CAAC,CAAC","file":"AdjustMaxHeightDirective.js","sourcesContent":["'use strict';\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name Directives.adjustMaxHeight\r\n * @restrict A\r\n *\r\n * @description The main purpose of this directive is to have a single place that contains logic to adjust max height of the element on\r\n * the basis of another element. For example, this directive can be used with Main Menu directive to adjust and constraint the max height of\r\n * the context menu according to the document height. This directive does not have isolated scope as it would prevent its usage on the element that\r\n * contain another isolated directive. It will not create a child scope instead relay on the current scope and expects few key properties to be there\r\n * to make things work. Please see the documentation of properties for details.\r\n *\r\n * ##Dependencies\r\n *\r\n * @example\r\n * <doc:example>\r\n *   <doc:source>\r\n *        <div adjust-max-height=\"\" update=\"doScroll\" context=\"window\"/>\r\n *   </doc:source>\r\n * </doc:example>\r\n */\r\n/* global plm360 */\r\nplm360.directive('adjustMaxHeight', [\r\n\t'$window',\r\n\t'$position',\r\n\tfunction ($window, $position) {\r\n\r\n\t\t/**\r\n\t\t * @ngdoc method\r\n\t\t * @name Directives.adjustMaxHeight#reCalculateMaxHeight\r\n\t\t * @methodOf Directives.adjustMaxHeight\r\n\t\t * @description Re calculate max height of the given element.\r\n\t\t *\r\n\t\t * @param {Object} elementToAdjust The element for which the max-height needs to be calculated.\r\n\t\t * @param {Number} height The height to be used for calculation.\r\n\t\t * @param {Number} percentage The desired percentage to which the element's max-height should be confined. Can have value from 0.0 - 1.0.\r\n\t\t * @param {Object} parentTopEl The parent element of elementToAdjust. Used to calculate the top position.\r\n\t\t */\r\n\t\tfunction reCalculateMaxHeight(elementToAdjust, height, percentage, parentTopEl) {\r\n\t\t\tvar newHeight = height * percentage;\r\n\t\t\tvar positionTop;\r\n\t\t\tif (angular.isDefined(parentTopEl)) {\r\n\t\t\t\tpositionTop = $position.offset(parentTopEl).top;\r\n\t\t\t} else {\r\n\t\t\t\tpositionTop = $position.offset(elementToAdjust).top;\r\n\t\t\t}\r\n\t\t\tvar maxMenuHeight;\r\n\r\n\t\t\t// Max height should also take into consideration the position of element.\r\n\t\t\tif (newHeight > positionTop) {\r\n\t\t\t\tmaxMenuHeight = newHeight - positionTop;\r\n\t\t\t} else {\r\n\t\t\t\tmaxMenuHeight = 0;\r\n\t\t\t}\r\n\r\n\t\t\telementToAdjust[0].style.maxHeight = Math.ceil(maxMenuHeight) + 'px';\r\n\t\t\telementToAdjust[0].style.overflow = 'auto';\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\trestrict: 'A',\r\n\t\t\tscope: false,\r\n\t\t\tlink: function (scope, element, attrs) {\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * @ngdoc property\r\n\t\t\t\t * @name Directives.adjustMaxHeight#heightContextEl\r\n\t\t\t\t * @propertyOf Directives.adjustMaxHeight\r\n\t\t\t\t * @description An optional property of type 'Angular.Element' that if given will be used as a main context for max height calculation.\r\n\t\t\t\t * Note: If this property is not available then by default window wrapper object will be used.\r\n\t\t\t\t */\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * @ngdoc property\r\n\t\t\t\t * @name Directives.adjustMaxHeight#percentage\r\n\t\t\t\t * @propertyOf Directives.adjustMaxHeight\r\n\t\t\t\t * @description An optional property of type 'Number' that if given will be used in max height calculate to confined the elements max-height based on the percentage.\r\n\t\t\t\t * Note: If this property is not available then by default 0.9 (or 90% of the context element height) will be used.\r\n\t\t\t\t */\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * @ngdoc method\r\n\t\t\t\t * @name Directives.adjustMaxHeight#onMaxHeightAdjustment\r\n\t\t\t\t * @methodOf Directives.adjustMaxHeight\r\n\t\t\t\t * @description An optional method that can be defined on scope.<br>\r\n\t\t\t\t * This method will be called every time the recalculation is performed.\r\n\t\t\t\t */\r\n\r\n\t\t\t\tvar elementToWatch = angular.isDefined(scope.heightContextEl) ? scope.heightContextEl : angular.element($window);\r\n\t\t\t\tvar percentage = scope.percentage || 0.90;\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Trigger re-calculation on resize event.\r\n\t\t\t\t */\r\n\t\t\t\telementToWatch.bind('resize', function () {\r\n\t\t\t\t\treCalculateMaxHeight(element, getHeight(), percentage, scope.parentEl);\r\n\t\t\t\t\tif (scope.onMaxHeightAdjustment) {\r\n\t\t\t\t\t\tscope.onMaxHeightAdjustment(element);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Trigger re-calculation on demand by updating the 'triggerMaxHeightAdjustment' attribute.\r\n\t\t\t\t */\r\n\t\t\t\tattrs.$observe('triggerMaxHeightAdjustment', function () {\r\n\t\t\t\t\treCalculateMaxHeight(element, getHeight(), percentage, scope.parentEl);\r\n\t\t\t\t\tif (scope.onMaxHeightAdjustment) {\r\n\t\t\t\t\t\tscope.onMaxHeightAdjustment(element);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * @ngdoc method\r\n\t\t\t\t * @name Directives.adjustMaxHeight#getHeight\r\n\t\t\t\t * @methodOf Directives.adjustMaxHeight\r\n\t\t\t\t * @description `private` Returns the height of the context element.\r\n\t\t\t\t *\r\n\t\t\t\t * @returns {Number} Height of the context element.\r\n\t\t\t\t */\r\n\t\t\t\tfunction getHeight() {\r\n\t\t\t\t\tvar docHeight = angular.isDefined(document.height) ?\r\n\t\t\t\t\t\tdocument.height : document.body.offsetHeight;\r\n\t\t\t\t\treturn angular.isDefined(scope.heightContextEl) ?\r\n\t\t\t\t\t\tscope.heightContextEl.prop('offsetHeight') : docHeight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.$on('$destroy', function () {\r\n\t\t\t\t\telementToWatch.unbind('resize');\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n]);\r\n"]}