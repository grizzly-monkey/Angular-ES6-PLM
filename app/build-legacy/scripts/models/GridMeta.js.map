{"version":3,"sources":["../../../scripts/models/GridMeta.js"],"names":[],"mappings":"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","file":"GridMeta.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.GridMeta\n *\n * @description This class wraps a list of GridMeta payload into an object\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar GridMeta = function () {\n};\n\nGridMeta.prototype = {\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.GridMeta#fetch\n\t * @methodOf Models.GridMeta\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link) {\n\t\tvar that = this;\n\t\treturn this.RESTWrapperService.get(link, null, null, {}).then(function (payload) {\n\t\t\tthat.json = payload;\n\t\t\treturn that.fetchFieldDefinitions().then(function () {\n\t\t\t\treturn that;\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.GridMeta#getFullList\n\t * @methodOf Models.GridMeta\n\t * @description Returns the full list of data\n\t *\n\t * @returns {Array} The full list of data\n\t */\n\tgetFullList: function () {\n\t\treturn angular.copy(this.json);\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.GridMeta#setRESTWrapperService\n\t * @methodOf Models.GridMeta\n\t * @description Sets RESTWrapperService object\n\t *\n\t * @param {Object} RESTWrapperService The RESTWrapperService object\n\t */\n\tsetRESTWrapperService: function (RESTWrapperService) {\n\t\tthis.RESTWrapperService = RESTWrapperService;\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.GridMeta#fetchFieldDefinitions\n\t * @methodOf Models.GridMeta\n\t * @description Fetches the field definition of each field\n\t *\n\t * @param {Object} $q The angular service to handle promises\n\t *\n\t * @returns {Object} A Promise that resolves after all fetches are complete\n\t */\n\tfetchFieldDefinitions: function () {\n\t\tvar that = this;\n\t\tvar deferred = this.$q.defer();\n\t\tvar promises = []; // Promises array to hold all for fetching field definitions\n\t\tvar promisesCounter = 0;\n\t\t_.each(this.json, function (row, rowIndex) {\n\t\t\tvar thisrow = row;\n\t\t\tvar promise = that.RESTWrapperService.get(row.link.substring(1), null, null, null, {\n\t\t\t\tACCEPT: 'application/vnd.autodesk.plm.meta+json'\n\t\t\t});\n\t\t\tpromises.push(promise);\n\t\t\tpromise.then(function (ret) {\n\t\t\t\tthisrow.definition = ret;\n\t\t\t\tthat.RESTWrapperService.get(ret.type.link.substring(1), null, null).then(function (typePayload) {\n\t\t\t\t\tthisrow.definition.type = typePayload;\n\t\t\t\t\tpromisesCounter++;\n\t\t\t\t\tif (promisesCounter === promises.length) {\n\t\t\t\t\t\tdeferred.resolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\treturn deferred.promise;\n\t}\n};\n\nangular.module('plm360.models').factory('GridMeta', [\n\t'RESTWrapperService',\n\t'EventService',\n\t'$q',\n\tfunction (RESTWrapperService, EventService, $q) {\n\t\tvar models = {};\n\t\tGridMeta.prototype.RESTWrapperService = RESTWrapperService;\n\t\tGridMeta.prototype.$q = $q;\n\t\tEventService.listen('gridMeta:*:get', function (event, params) {\n\t\t\tvar model = models[params] || new GridMeta();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params).then(function (obj) {\n\t\t\t\tEventService.send('gridMeta:' + event.split(':')[1] + ':done', obj);\n\t\t\t});\n\t\t});\n\t\treturn GridMeta;\n\t}\n]);\n"]}