{"version":3,"sources":["../../../scripts/models/GridData.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;AAab,IAAI,QAAQ,GAAG,SAAX,QAAQ,GAAe;AAC1B,KAAI,IAAI,GAAG,IAAI,CAAC;;;;;;;;;;;;;AAahB,KAAI,CAAC,KAAK,GAAG,UAAU,IAAI,EAAE,MAAM,EAAE;AACpC,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,MAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,SAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE;AAClF,OAAI,CAAC,IAAI,GAAG,OAAO,CAAC;AACpB,UAAO,IAAI,CAAC;GACZ,CAAC,CAAC;EACH,CAAC;;;;;;;;;;AAUF,KAAI,CAAC,WAAW,GAAG,YAAY;AAC9B,SAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC/B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCF,KAAI,CAAC,IAAI,GAAG,UAAU,CAAC,EAAE,YAAY,EAAE,WAAW,EAAE,MAAM,EAAE,QAAQ,EAAE;AACrE,MAAI,IAAI,GAAG,IAAI,CAAC;;;AAGhB,MAAI,QAAQ,GAAG,EAAE,CAAC;;;AAGlB,MAAI,MAAM,GAAG,EAAE,CAAC;;;AAGhB,MAAI,eAAe,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;;;;;;;;;;;AAWtC,MAAI,SAAS,GAAG,SAAZ,SAAS,CAAa,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE;AACrE,OAAI,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;AAC/B,OAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;AAC/B,WAAO,EAAE,OAAO;IAChB,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAC7B,IAAI,CAAC,UAAU,QAAQ,EAAE;AACzB,QAAI,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;AAC3C,MAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,GAAG,EAAE;AACrC,UAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE;AACjD,UAAG,CAAC,OAAO,GAAG,OAAO,CAAC;OACtB;MACD,CAAC,CAAC;KACH,MAAM;AACN,SAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC;KACxC;AACD,YAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC3B,EAAE,UAAU,QAAQ,EAAE;AACtB,QAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;AACpD,WAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;KAC3B;AACD,KAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,KAAK,EAAE;AAC7C,WAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;KAC/C,CAAC,CAAC;AACH,YAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC1B,CAAC,CAAC;AACH,UAAO,QAAQ,CAAC,OAAO,CAAC;GACxB,CAAC;;AAEF,GAAC,CAAC,IAAI,CAAC,YAAY,EAAE,UAAU,GAAG,EAAE,QAAQ,EAAE;AAC7C,OAAI,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,GAAG,EAAE;AACrC,WAAO,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC,aAAa,CAAC;IACvC,CAAC,CAAC;AACH,OAAI,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;AAC5B,QAAI,OAAO,GAAG,EAAE,CAAC;AACjB,QAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;AACtB,KAAC,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,GAAG,EAAE,GAAG,EAAE;AAC/B,SAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,IAAI,EAAE;AAC5C,aAAO,GAAG,KAAK,IAAI,CAAC,IAAI,CAAC;MACzB,CAAC,CAAC;;AAEH,SAAI,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,IAAK,GAAG,KAAK,OAAO,IAAI,KAAK,CAAC,KAAK,AAAC,EAAE;AACjE,aAAO,CAAC,IAAI,CAAC;AACZ,eAAQ,EAAE,GAAG,CAAC,QAAQ;AACtB,YAAK,EAAE,GAAG,CAAC,KAAK;OAChB,CAAC,CAAC;MACH;KACD,CAAC,CAAC;;AAEH,QAAI,CAAC,KAAK,CAAC,KAAK,EAAE;AACjB,aAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;KAC1E,MAAM;AACN,aAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;KACtF;;IAED;GACD,CAAC,CAAC;;;;AAIH,MAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE;AACpE,OAAI,iBAAiB,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,UAAU,MAAM,EAAE;AAC3D,WAAO,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC;IAC/B,CAAC,CAAC;;;AAGH,OAAI,iBAAiB,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM,EAAE;AACjD,mBAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACjC,MAAM;AACN,mBAAe,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAChC;AACD,OAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gCAAgC,EAAE,MAAM,CAAC,CAAC;GACjE,CAAC,CAAC;;AAEH,SAAO,eAAe,CAAC,OAAO,CAAC;EAC/B,CAAC;CACF,CAAC;;AAEF,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,CACnD,oBAAoB,EACpB,cAAc,EACd,eAAe,EACf,IAAI,EACJ,UAAU,kBAAkB,EAAE,YAAY,EAAE,aAAa,EAAE,EAAE,EAAE;AAC9D,KAAI,MAAM,GAAG,EAAE,CAAC;AAChB,SAAQ,CAAC,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;AAC3D,SAAQ,CAAC,SAAS,CAAC,YAAY,GAAG,YAAY,CAAC;AAC/C,SAAQ,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC;;;AAG3B,aAAY,CAAC,MAAM,CAAC,YAAY,EAAE,UAAU,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE;AACzE,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,QAAQ,EAAE,CAAC;AAC7C,QAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AACvB,OAAK,CAAC,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACtD,eAAY,CAAC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;GAChE,CAAC,CAAC;EACH,CAAC,CAAC;;;AAGH,aAAY,CAAC,MAAM,CAAC,iBAAiB,EAAE,UAAU,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,UAAU,EAAE;AAC3G,KAAG,CAAC,IAAI,CAAC,CAAC,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,YAAY;AACxE,gBAAa,CAAC,WAAW,EAAE,CAAC;AAC5B,eAAY,CAAC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,WAAW,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;GAC1E,EAAE,YAAY;AACd,eAAY,CAAC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,WAAW,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;GAC3E,CAAC,CAAC;EACH,CAAC,CAAC;AACH,QAAO,QAAQ,CAAC;CAChB,CACD,CAAC,CAAC","file":"GridData.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.Grid\n *\n * @description This class wraps a list of Grid payload into an object\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar GridData = function () {\n\tvar that = this;\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Grid#fetch\n\t * @methodOf Models.Grid\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t * @param {Object} params The parameters used for fetching (ex. page, page size, etc.)\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tthis.fetch = function (link, params) {\n\t\tvar that = this;\n\t\tthis.link = link;\n\t\treturn this.RESTWrapperService.get(link, null, params, {}).then(function (payload) {\n\t\t\tthat.json = payload;\n\t\t\treturn that;\n\t\t});\n\t};\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Grid#getFullList\n\t * @methodOf Models.Grid\n\t * @description Returns the full list of data\n\t *\n\t * @returns {Array} The full list of data\n\t */\n\tthis.getFullList = function () {\n\t\treturn angular.copy(this.json);\n\t};\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Grid#getTransitionLink\n\t * @methodOf Models.Grid\n\t * @description Returns the REST api link for the item given the id\n\t *\n\t * @param {Number} workspaceId The ID of the workspace of the item to be retrieved\n\t * @param {Number} dmsId The ID of the item to be retrieved\n\t * @param {Number} transitionId The ID of the transition to be retrieved\n\t *\n\t * @returns {String} The string representation of the REST link\n\t */\n\t// getTransitionLink: function (workspaceId, dmsId, transitionId) {\n\t// \tvar ret = '';\n\t// \tangular.forEach(this.json.availableTransitions.transitions, function (transition) {\n\t// \t\tif (transition.transitionID == transitionId) {\n\t// \t\t\tret = transition.link.replace('[workspaceId]', workspaceId).replace('[itemId]', dmsId);\n\t// \t\t}\n\t// \t});\n\t// \treturn ret;\n\t// },\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Grid#save\n\t * @methodOf Models.Grid\n\t * @description Saves the data containing the workspace item grid information\n\t *\n\t * @param \t{Object} \t\t_\t\t\t\t\t\t\t\tThe underscore instance\n\t * @param \t{Object}\t\t\tmodifiedData \t\t\t\tThe data that needs to be PUT\n\t * @param\t{Number}\t\tworkspaceId\t\t\t\t\t\tThe ID of the workspace\n\t * @param\t{Number}\t\titemId\t\t\t\t\t\t\tThe ID of the item\n\t * @param\t{Object}\t\tmetadata\t\t\t\t\t\tThe metadata of grid definition\n\t *\n\t * @returns {Object} \t\tA promise of the PUT request\n\t *\n\t */\n\tthis.save = function (_, modifiedData, workspaceId, itemId, metadata) {\n\t\tvar that = this;\n\n\t\t// holds the array of promises\n\t\tvar promises = [];\n\n\t\t// holds the array of errors\n\t\tvar errors = {};\n\n\t\t// the promise to be resolved upon all promises resolved\n\t\tvar saveAllDeferred = this.$q.defer();\n\n\t\t/**\n\t\t* Function to make the request, used to keep the reference to rowIndex\n\t\t* @param {String} method The method to use for the request\n\t\t* @param {Object} rowData The data to be posted/put\n\t\t* @param {Array} params The parameter array that RWS uses to construct the URI\n\t\t* @param {Number} rowIndex The index of the row in the data array - use this to map the error back - note, we can't use other things because we don't have unique IDs for new rows\n\t\t*\n\t\t* @return {Object} The promise of the request\n\t\t*/\n\t\tvar doRequest = function (method, rowData, params, rowIndex, newData) {\n\t\t\tvar deferred = that.$q.defer();\n\t\t\tthat.RESTWrapperService[method]({\n\t\t\t\trowData: rowData\n\t\t\t}, params, '', null, null, {})\n\t\t\t.then(function (response) {\n\t\t\t\tif (angular.isDefined(newData.rowId.value)) {\n\t\t\t\t\t_.each(that.json.rows, function (row) {\n\t\t\t\t\t\tif (row.rowData[0].value === newData.rowId.value) {\n\t\t\t\t\t\t\trow.rowData = newData;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthat.json.rows.push({rowData: rowData});\n\t\t\t\t}\n\t\t\t\tdeferred.resolve(response);\n\t\t\t}, function (response) {\n\t\t\t\tif (!angular.isDefined(errors[newData.rowId.value])) {\n\t\t\t\t\terrors[newData.rowId] = [];\n\t\t\t\t}\n\t\t\t\t_.each(response.data.errors, function (error) {\n\t\t\t\t\terrors[newData.rowId].push(error.errorContext);\n\t\t\t\t});\n\t\t\t\tdeferred.reject(response);\n\t\t\t});\n\t\t\treturn deferred.promise;\n\t\t};\n\n\t\t_.each(modifiedData, function (row, rowIndex) {\n\t\t\tvar diff = _.find(row, function (col) {\n\t\t\t\treturn col.value !== col.originalValue;\n\t\t\t});\n\t\t\tif (angular.isDefined(diff)) {\n\t\t\t\tvar rowData = [];\n\t\t\t\tvar rowId = row.rowId;\n\t\t\t\t_.each(row, function (col, key) {\n\t\t\t\t\tvar found = _.find(metadata, function (meta) {\n\t\t\t\t\t\treturn key === meta.link;\n\t\t\t\t\t});\n\n\t\t\t\t\tif (angular.isDefined(found) || (key === 'rowId' && rowId.value)) {\n\t\t\t\t\t\trowData.push({\n\t\t\t\t\t\t\t__self__: col.__self__,\n\t\t\t\t\t\t\tvalue: col.value\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (!rowId.value) {\n\t\t\t\t\tpromises.push(doRequest('post', rowData, that.json.route, rowIndex, row));\n\t\t\t\t} else {\n\t\t\t\t\tpromises.push(doRequest('put', rowData, rowData[0].link.substring(1), rowIndex, row));\n\t\t\t\t}\n\t\t\t\t// console.log(rowData);\n\t\t\t}\n\t\t});\n\n\t\t// saveData is complete when all the promises have been fulfilled\n\t\t// copied from AffectedItemsController\n\t\tthis.RESTWrapperService.allSettled(promises).then(function (results) {\n\t\t\tvar succeededRequests = _.filter(results, function (result) {\n\t\t\t\treturn result.success === true;\n\t\t\t});\n\n\t\t\t// Fulfill if all requests succeeded, reject if some did not\n\t\t\tif (succeededRequests.length === promises.length) {\n\t\t\t\tsaveAllDeferred.resolve(results);\n\t\t\t} else {\n\t\t\t\tsaveAllDeferred.reject(results);\n\t\t\t}\n\t\t\tthat.EventService.send('grid:validationsErrors:present', errors);\n\t\t});\n\n\t\treturn saveAllDeferred.promise;\n\t};\n};\n\nangular.module('plm360.models').factory('GridData', [\n\t'RESTWrapperService',\n\t'EventService',\n\t'ModelsManager',\n\t'$q',\n\tfunction (RESTWrapperService, EventService, ModelsManager, $q) {\n\t\tvar models = {};\n\t\tGridData.prototype.RESTWrapperService = RESTWrapperService;\n\t\tGridData.prototype.EventService = EventService;\n\t\tGridData.prototype.$q = $q;\n\n\t\t// get\n\t\tEventService.listen('grid:*:get', function (event, params, requestParams) {\n\t\t\tvar model = models[params] || new GridData();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params, requestParams).then(function (obj) {\n\t\t\t\tEventService.send('grid:' + event.split(':')[1] + ':done', obj);\n\t\t\t});\n\t\t});\n\n\t\t// save\n\t\tEventService.listen('grid:*:saveGrid', function (event, obj, _, tableData, workspaceId, itemId, gridFields) {\n\t\t\tobj.save(_, tableData, workspaceId, itemId, gridFields).then(function () {\n\t\t\t\tModelsManager.resetModels();\n\t\t\t\tEventService.send('grid:' + event.split(':')[1] + ':saveDone', true, obj);\n\t\t\t}, function () {\n\t\t\t\tEventService.send('grid:' + event.split(':')[1] + ':saveDone', false, obj);\n\t\t\t});\n\t\t});\n\t\treturn GridData;\n\t}\n]);\n"]}