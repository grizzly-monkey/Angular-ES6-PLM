{"version":3,"sources":["../../../scripts/models/Ownership.js"],"names":[],"mappings":"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","file":"Ownership.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.Ownership\n *\n * @description This class wraps a list of ownership info payload into an object\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar Ownership = function (json) {\n\tthis.json = json;\n};\n\nOwnership.prototype = {\n\t/**\n\t * @ngdoc method\n\t * @name Models.Ownership#fetch\n\t * @methodOf Models.Ownership\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link) {\n\t\tvar that = this;\n\n\t\treturn this.RESTWrapperService.get(link, null, null, {}).then((payload) => {\n\t\t\tlet promises = {\n\t\t\t\townership: this.getDetails(payload.owners.link),\n\t\t\t\taudit: this.getDetails(payload.audit.link)\n\t\t\t};\n\t\t\treturn this.$q.all(promises).then((values) => {\n\t\t\t\tthat.json = values;\n\t\t\t\treturn that;\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Ownership#getFullList\n\t * @methodOf Models.Ownership\n\t * @description Returns the details about ownwership and audit\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} A list of ownership and audit data\n\t */\n\tgetDetails: function (link) {\n\t\treturn this.RESTWrapperService.get(link, null, null, {});\n\t},\n\n\t// Just some stubs for later\n\tgetOwners: function () {},\n\tgetAdditionOwners: function () {},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Ownership#getFullList\n\t * @methodOf Models.Ownership\n\t * @description Returns the full list of data\n\t *\n\t * @returns {Object} The full list of data\n\t */\n\tgetFullList: function () {\n\t\treturn angular.copy(this.json);\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Ownership#replaceOwner\n\t * @methodOf Models.Ownership\n\t * @description Remove Primary user and insert a new Primary User\n\t *\n\t * @param {Array} owners The list of owners\n\t * @param {Object} newOwner The new primary owner\n\t * @param {Boolean} isNotifyingOwnerByEmail true to send email to new owner\n\t *\n\t * @returns {Promise} A Promise when owners have been updated.\n\t */\n\treplaceOwner: function (owners, newOwner, isNotifyingOwnerByEmail) {\n\t\towners = owners.filter(owner =>\n\t\t\towner.ownerType !== this.OWNER_TYPE.PRIMARY\n\t\t);\n\n\t\tlet userId = newOwner.__self__.split('/').pop();\n\t\towners.push({\n\t\t\townerType: this.OWNER_TYPE.PRIMARY,\n\t\t\t__self__: `${this.json.ownership.__self__}/${userId}`,\n\t\t\tnotify: !!isNotifyingOwnerByEmail\n\t\t});\n\n\t\treturn this.RESTWrapperService.put(owners, this.json.ownership.__self__, null, {}, {\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Ownership#editAdditionalOwners\n\t * @methodOf Models.Ownership\n\t * @description filter Primary users and insert new additional users and groups\n\t *\n\t * @param {Array} owners The list of owners\n\t * @param {Array} additionalOwners a new list of additional owners\n\t * @param {Array} additionalGroups a new list of additional groups\n\t *\n\t * @returns {Promise} A Promise when owners have been updated.\n\t */\n\teditAdditionalOwners: function (owners, additionalOwners, additionalGroups) {\n\t\towners = owners.filter(owner =>\n\t\t\towner.ownerType === this.OWNER_TYPE.PRIMARY\n\t\t);\n\n\t\tadditionalOwners.forEach(user => {\n\t\t\tlet userId = user.__self__.split('/').pop();\n\t\t\towners.push({\n\t\t\t\townerType: this.OWNER_TYPE.ADDITIONAL_USER,\n\t\t\t\t__self__: `${this.json.ownership.__self__}/${userId}`\n\t\t\t});\n\t\t});\n\n\t\tadditionalGroups.forEach(user => {\n\t\t\tlet groupId = user.__self__.split('/').pop();\n\t\t\towners.push({\n\t\t\t\townerType: this.OWNER_TYPE.ADDITIONAL_GROUP,\n\t\t\t\t__self__: `${this.json.ownership.__self__}/${groupId}`\n\t\t\t});\n\t\t});\n\n\t\treturn this.RESTWrapperService.put(owners, this.json.ownership.__self__, null, {}, {\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\t}\n};\n\nangular.module('plm360.models').factory('Ownership', [\n\t'RESTWrapperService',\n\t'EventService',\n\t'$q',\n\t'OWNER_TYPE',\n\tfunction (RESTWrapperService, EventService, $q, OWNER_TYPE) {\n\t\tvar models = {};\n\n\t\tOwnership.prototype.RESTWrapperService = RESTWrapperService;\n\t\tOwnership.prototype.$q = $q;\n\t\tOwnership.prototype.OWNER_TYPE = OWNER_TYPE;\n\n\t\tEventService.listen('ownership:*:get', function (event, params, requestParams) {\n\t\t\tvar model = models[params] || new Ownership();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params, requestParams).then(function (obj) {\n\t\t\t\tEventService.send('ownership:' + event.split(':')[1] + ':done', obj);\n\t\t\t});\n\t\t});\n\n\t\treturn Ownership;\n\t}\n]);"]}