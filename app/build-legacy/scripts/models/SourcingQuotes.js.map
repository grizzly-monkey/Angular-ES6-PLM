{"version":3,"sources":["../../../scripts/models/SourcingQuotes.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;AAYb,IAAI,cAAc,GAAG,SAAjB,cAAc,GAAe,EAChC,CAAC;;AAEF,cAAc,CAAC,SAAS,GAAG;;;;;;;;;;;;AAY1B,MAAK,EAAE,eAAU,IAAI,EAAE;AACtB,MAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,SAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE;AAChF,OAAI,CAAC,IAAI,GAAG,EAAE,CAAC;AACf,UAAO,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,IAAI,EAAE,KAAK,EAAE;AAC/C,QAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;IACxB,EAAE,IAAI,CAAC,CAAC;AACT,UAAO,IAAI,CAAC;GACZ,EAAE,UAAU,KAAK,EAAE;AACnB,UAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;GACnD,CAAC,CAAC;EACH;;;;;;;;;;AAUD,YAAW,EAAE,uBAAY;AACxB,SAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC/B;;CAED,CAAC;;AAEF,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,CACzD,oBAAoB,EACpB,cAAc,EACd,UAAU,kBAAkB,EAAE,YAAY,EAAE;AAC3C,KAAI,MAAM,GAAG,EAAE,CAAC;AAChB,eAAc,CAAC,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;AACjE,aAAY,CAAC,MAAM,CAAC,sBAAsB,EAAE,UAAU,KAAK,EAAE,MAAM,EAAE;AACpE,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,cAAc,EAAE,CAAC;AACnD,QAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AACvB,OAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACvC,eAAY,CAAC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;GAC1E,CAAC,CAAC;EACH,CAAC,CAAC;AACH,QAAO,cAAc,CAAC;CACtB,CACD,CAAC,CAAC","file":"SourcingQuotes.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.SourcingQuotes\n *\n * @description This class wraps a list of Quotes of a Sourcing payload into an object\n *\n * ##Dependencies\n *\n */\n\nvar SourcingQuotes = function () {\n};\n\nSourcingQuotes.prototype = {\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Sourcings#fetch\n\t * @methodOf Models.Sourcings\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link) {\n\t\tvar that = this;\n\n\t\treturn this.RESTWrapperService.get(link, null, null, {}).then(function (payload) {\n\t\t\tthat.json = [];\n\t\t\tangular.forEach(payload, function (item, index) {\n\t\t\t\tthat.json[index] = item;\n\t\t\t}, that);\n\t\t\treturn that;\n\t\t}, function (error) {\n\t\t\tconsole.log('Models.SourcingQuotes:fetch:', error);\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.SourcingQuotes#getFullList\n\t * @methodOf Models.SourcingQuotes\n\t * @description Returns the full list of data\n\t *\n\t * @returns {Array} The full list of data\n\t */\n\tgetFullList: function () {\n\t\treturn angular.copy(this.json);\n\t}\n\n};\n\nangular.module('plm360.models').factory('SourcingQuotes', [\n\t'RESTWrapperService',\n\t'EventService',\n\tfunction (RESTWrapperService, EventService) {\n\t\tvar models = {};\n\t\tSourcingQuotes.prototype.RESTWrapperService = RESTWrapperService;\n\t\tEventService.listen('sourcingQuotes:*:get', function (event, params) {\n\t\t\tvar model = models[params] || new SourcingQuotes();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params).then(function (obj) {\n\t\t\t\tEventService.send('sourcingQuotes:' + event.split(':')[1] + ':done', obj);\n\t\t\t});\n\t\t});\n\t\treturn SourcingQuotes;\n\t}\n]);\n"]}