{"version":3,"sources":["../../../scripts/models/Report.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;AAab,IAAI,MAAM,GAAG,SAAT,MAAM,CAAa,IAAI,EAAE;AAC5B,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;CACjB,CAAC;;AAEF,MAAM,CAAC,SAAS,GAAG;;;;;;;;;;;AAWlB,MAAK,EAAE,eAAU,IAAI,EAAE;AACtB,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,SAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE;AAClF,OAAI,CAAC,IAAI,GAAG,OAAO,CAAC;AACpB,UAAO,IAAI,CAAC;GACZ,CAAC,CAAC;EACH;;;;;;;;;;AAUD,YAAW,EAAE,uBAAY;AACxB,SAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC/B;;;;;;;;;;AAUD,QAAO,EAAE,mBAAY;AACpB,SAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC;EACnD;;;;;;;;;;AAUD,SAAQ,EAAE,oBAAY;AACrB,SAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,KAAK,CAAC;EACpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsCD,CAAC;;AAEF,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CACjD,oBAAoB,EACpB,cAAc,EACd,UAAU,kBAAkB,EAAE,YAAY,EAAE;AAC3C,KAAI,MAAM,GAAG,EAAE,CAAC;AAChB,OAAM,CAAC,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;AACzD,aAAY,CAAC,MAAM,CAAC,cAAc,EAAE,UAAU,KAAK,EAAE,MAAM,EAAE;AAC5D,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,EAAE,CAAC;AAC3C,QAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AACvB,MAAI,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEnC,OAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACvC,eAAY,CAAC,IAAI,CAAC,SAAS,GAAG,QAAQ,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;GACvD,EAAE,UAAU,GAAG,EAAE;AACjB,eAAY,CAAC,IAAI,CAAC,SAAS,GAAG,QAAQ,GAAG,WAAW,EAAE,GAAG,CAAC,CAAC;GAC3D,CAAC,CAAC;EACH,CAAC,CAAC;AACH,QAAO,MAAM,CAAC;CACd,CACD,CAAC,CAAC","file":"Report.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.Report\n *\n * @description This class wraps a Report payload into an object\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar Report = function (json) {\n\tthis.json = json;\n};\n\nReport.prototype = {\n\t/**\n\t * @ngdoc method\n\t * @name Models.Report#fetch\n\t * @methodOf Models.Report\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link) {\n\t\tvar that = this;\n\t\treturn this.RESTWrapperService.get(link, null, null, null).then(function (payload) {\n\t\t\tthat.json = payload;\n\t\t\treturn that;\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Report#getFullList\n\t * @methodOf Models.Report\n\t * @description Returns the full list of data\n\t *\n\t * @returns {Array} The full list of data\n\t */\n\tgetFullList: function () {\n\t\treturn angular.copy(this.json);\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Report#getType\n\t * @methodOf Models.Report\n\t * @description Returns type of chart\n\t *\n\t * @returns {String} The type of chart\n\t */\n\tgetType: function () {\n\t\treturn this.json.reportDefinition.reportChart.type;\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Report#getTitle\n\t * @methodOf Models.Report\n\t * @description Returns title of chart\n\t *\n\t * @returns {String} The title of chart\n\t */\n\tgetTitle: function () {\n\t\treturn this.json.reportDefinition.reportChart.title;\n\t}\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Report#getItemLink\n\t * @methodOf Models.Report\n\t * @description Returns the REST api link for the item given the id\n\t *\n\t * @param {Number} reportId The ID of the report to be retrieved\n\t *\n\t * @returns {String} The string representation of the REST link\n\t */\n\t// getReportLink: function (reportId) {\n\t// \tvar ret = '';\n\t// \tangular.forEach(this.json.reportDefinitionList.list, function (report) {\n\t// \t\tif (reportId == report.id) {\n\t// \t\t\tret = report.link;\n\t// \t\t}\n\t// \t});\n\t// \treturn ret;\n\t// },\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Report#setItemObj\n\t * @methodOf Models.Report\n\t * @description Attaches the report object to the tree\n\t *\n\t * @param {Number} reportId The ID of the report to be stored\n\t * @param {Object} The report object\n\t */\n\t// setReportObj: function (reportId, obj) {\n\t// \tangular.forEach(this.json.reportDefinitionList.list, function (report) {\n\t// \t\tif (reportId == report.id) {\n\t// \t\t\treport.obj = obj;\n\t// \t\t}\n\t// \t});\n\t// }\n};\n\nangular.module('plm360.models').factory('Report', [\n\t'RESTWrapperService',\n\t'EventService',\n\tfunction (RESTWrapperService, EventService) {\n\t\tvar models = {};\n\t\tReport.prototype.RESTWrapperService = RESTWrapperService;\n\t\tEventService.listen('report:*:get', function (event, params) {\n\t\t\tvar model = models[params] || new Report();\n\t\t\tmodels[params] = model;\n\t\t\tvar reportId = event.split(':')[1];\n\n\t\t\tmodel.fetch(params).then(function (obj) {\n\t\t\t\tEventService.send('report:' + reportId + ':done', obj);\n\t\t\t}, function (obj) {\n\t\t\t\tEventService.send('report:' + reportId + ':rejected', obj);\n\t\t\t});\n\t\t});\n\t\treturn Report;\n\t}\n]);\n"]}