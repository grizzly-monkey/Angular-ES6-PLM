{"version":3,"sources":["../../../scripts/models/Reports.js"],"names":[],"mappings":"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","file":"Reports.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.Reports\n *\n * @description This class wraps a list of Reports payload into an object\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar Reports = function () {\n\tvar that = this;\n};\n\nReports.prototype = {\n\t/**\n\t * @ngdoc method\n\t * @name Models.Reports#fetch\n\t * @methodOf Models.Reports\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link) {\n\t\tvar that = this;\n\t\treturn this.RESTWrapperService.get(link, null, null, {}).then(function (payload) {\n\t\t\tthat.json = payload;\n\t\t\tif (that.json.dashboardReportList === null) {\n\t\t\t\tthat.json.dashboardReportList = {\n\t\t\t\t\tlist: []\n\t\t\t\t};\n\t\t\t}\n\t\t\tthat.json.dashboardReportList.list = _.sortBy(that.json.dashboardReportList.list, function (report) {\n\t\t\t\treturn report.position;\n\t\t\t});\n\t\t\tangular.forEach(that.json.dashboardReportList.list, function (report, ind) {\n\t\t\t\treport.link = 'api/rest/v1/reports/' + report.id + '/chart.json';\n\t\t\t});\n\t\t\treturn that;\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Reports#getFullList\n\t * @methodOf Models.Reports\n\t * @description Returns the full list of data\n\t *\n\t * @returns {Array} The full list of data\n\t */\n\tgetFullList: function () {\n\t\treturn angular.copy(this.json);\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Reports#getDashboardReports\n\t * @methodOf Models.Reports\n\t * @description Returns the list of reports configured for dashboard.\n\t *\n\t * @returns {Array} The list of reports\n\t */\n\tgetDashboardReports: function () {\n\t\tvar list = angular.copy(this.json).dashboardReportList.list;\n\t\treturn list;\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Reports#getItemLink\n\t * @methodOf Models.Reports\n\t * @description Returns the REST api link for the item given the id\n\t *\n\t * @param {Number} reportId The ID of the report to be retrieved\n\t *\n\t * @returns {String} The string representation of the REST link\n\t */\n\tgetReportLink: function (reportId) {\n\t\tvar ret = '';\n\t\tangular.forEach(this.json.dashboardReportList.list, function (report) {\n\t\t\tif (reportId === report.id) {\n\t\t\t\tret = report.link;\n\t\t\t}\n\t\t});\n\t\treturn ret;\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Reports#setItemObj\n\t * @methodOf Models.Reports\n\t * @description Attaches the report object to the tree\n\t *\n\t * @param {Number} reportId The ID of the report to be stored\n\t * @param {Object} obj The report object\n\t */\n\tsetReportObj: function (reportId, obj) {\n\t\tangular.forEach(this.json.dashboardReportList.list, function (report) {\n\t\t\tif (reportId === report.id) {\n\t\t\t\treport.obj = obj;\n\t\t\t}\n\t\t});\n\t}\n};\n\nangular.module('plm360.models').factory('Reports', [\n\t'RESTWrapperService',\n\t'EventService',\n\tfunction (RESTWrapperService, EventService) {\n\t\tvar models = {};\n\t\tReports.prototype.RESTWrapperService = RESTWrapperService;\n\t\tEventService.listen('reports:*:get', function (event, params) {\n\t\t\tvar model = models[params] || new Reports();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params).then(function (obj) {\n\t\t\t\tEventService.send('reports:' + event.split(':')[1] + ':done', obj);\n\t\t\t});\n\t\t});\n\t\treturn Reports;\n\t}\n]);\n"]}