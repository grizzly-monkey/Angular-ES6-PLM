{"version":3,"sources":["../../../scripts/models/State.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;AAab,IAAI,KAAK,GAAG,SAAR,KAAK,GAAe,EACvB,CAAC;;AAEF,KAAK,CAAC,SAAS,GAAG;;;;;;;;;;;AAWjB,MAAK,EAAE,eAAU,IAAI,EAAE;AACtB,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,SAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE;AAChF,OAAI,CAAC,IAAI,GAAG,OAAO,CAAC;AACpB,UAAO,IAAI,CAAC;GACZ,CAAC,CAAC;EACH;;;;;;;;;;AAUD,YAAW,EAAE,uBAAY;AACxB,SAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC/B;;;;;;;;;;AAUD,QAAO,EAAE,mBAAY;AACpB,SAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC;EACvC;;;;;;;;;;AAUD,eAAc,EAAE,0BAAY;AAC3B,SAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC;EAC1C;;;;;;;;;;;;;;AAcD,kBAAiB,EAAE,2BAAU,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE;AAC9D,MAAI,GAAG,GAAG,EAAE,CAAC;AACb,SAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE,UAAU,UAAU,EAAE;AACjF,OAAI,UAAU,CAAC,YAAY,KAAK,YAAY,EAAE;AAC7C,OAAG,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IACvF;GACD,CAAC,CAAC;AACH,SAAO,GAAG,CAAC;EACX;CACD,CAAC;;AAEF,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAChD,oBAAoB,EACpB,cAAc,EACd,UAAU,kBAAkB,EAAE,YAAY,EAAE;AAC3C,KAAI,MAAM,GAAG,EAAE,CAAC;AAChB,MAAK,CAAC,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;AACxD,aAAY,CAAC,MAAM,CAAC,iBAAiB,EAAE,UAAU,KAAK,EAAE,MAAM,EAAE;AAC/D,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,KAAK,EAAE,CAAC;AAC1C,QAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AACvB,OAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACvC,eAAY,CAAC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;GACrE,CAAC,CAAC;EACH,CAAC,CAAC;AACH,QAAO,KAAK,CAAC;CACb,CACD,CAAC,CAAC","file":"State.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.State\n *\n * @description This class wraps a list of Transitions payload into an object\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar State = function () {\n};\n\nState.prototype = {\n\t/**\n\t * @ngdoc method\n\t * @name Models.State#fetch\n\t * @methodOf Models.State\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link) {\n\t\tvar that = this;\n\t\treturn this.RESTWrapperService.get(link, null, null, {}).then(function (payload) {\n\t\t\tthat.json = payload;\n\t\t\treturn that;\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.State#getFullList\n\t * @methodOf Models.State\n\t * @description Returns the full list of data\n\t *\n\t * @returns {Array} The full list of data\n\t */\n\tgetFullList: function () {\n\t\treturn angular.copy(this.json);\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.State#getName\n\t * @methodOf Models.State\n\t * @description Returns the name of the state\n\t *\n\t * @returns {String} The name of the state\n\t */\n\tgetName: function () {\n\t\treturn this.json.data.currentStateName;\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.State#getTransitions\n\t * @methodOf Models.State\n\t * @description Returns the available transitions of the state\n\t *\n\t * @returns {Array} The available transitions of the state\n\t */\n\tgetTransitions: function () {\n\t\treturn this.json.data.workflowTransitions;\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.State#getTransitionLink\n\t * @methodOf Models.State\n\t * @description Returns the REST api link for the item given the id\n\t *\n\t * @param {Number} workspaceId The ID of the workspace of the item to be retrieved\n\t * @param {Number} dmsId The ID of the item to be retrieved\n\t * @param {Number} transitionId The ID of the transition to be retrieved\n\t *\n\t * @returns {String} The string representation of the REST link\n\t */\n\tgetTransitionLink: function (workspaceId, dmsId, transitionId) {\n\t\tvar ret = '';\n\t\tangular.forEach(this.json.availableTransitions.transitions, function (transition) {\n\t\t\tif (transition.transitionID === transitionId) {\n\t\t\t\tret = transition.link.replace('[workspaceId]', workspaceId).replace('[itemId]', dmsId);\n\t\t\t}\n\t\t});\n\t\treturn ret;\n\t}\n};\n\nangular.module('plm360.models').factory('State', [\n\t'RESTWrapperService',\n\t'EventService',\n\tfunction (RESTWrapperService, EventService) {\n\t\tvar models = {};\n\t\tState.prototype.RESTWrapperService = RESTWrapperService;\n\t\tEventService.listen('itemState:*:get', function (event, params) {\n\t\t\tvar model = models[params] || new State();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params).then(function (obj) {\n\t\t\t\tEventService.send('itemState:' + event.split(':')[1] + ':done', obj);\n\t\t\t});\n\t\t});\n\t\treturn State;\n\t}\n]);\n"]}