{"version":3,"sources":["../../../scripts/models/Items.js"],"names":[],"mappings":"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","file":"Items.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.Items\n *\n * @description This class wraps a list of items payload into an object\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar Items = function () {\n};\n\nItems.prototype = {\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Items#fetch\n\t * @methodOf Models.Items\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t * @param {Object} params The parameters used for fetching (ex. page, page size, etc.)\n\t * @param {String} workspaceId The ID of workspace whose items to retrieve\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link, params, workspaceId) {\n\t\tvar that = this;\n\t\treturn this.RESTWrapperService.get(link, null, params, {skipCache: true}, {\n\t\t\tACCEPT: 'application/json'\n\t\t}).then(function (payload) {\n\t\t\tthat.json = payload;\n\t\t\tvar promises = [];\n\t\t\tangular.forEach(that.json.items, function (item) {\n\t\t\t\titem.urn = that.UrnParser.encode(item.item.urn);\n\t\t\t});\n\t\t\treturn that.$q.all(promises).then(function () {\n\t\t\t\treturn that;\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Items#getFullList\n\t * @methodOf Models.Items\n\t * @description Returns the full list of data\n\t *\n\t * @returns {Array} The full list of data\n\t */\n\tgetFullList: function () {\n\t\treturn angular.copy(this.json);\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Items#getItemLink\n\t * @methodOf Models.Items\n\t * @description Returns the REST api link for the item given the id\n\t *\n\t * @param {Number} workspaceId The ID of the workspace of the item to be retrieved\n\t * @param {Number} dmsId The ID of the item to be retrieved\n\t *\n\t * @returns {String} The string representation of the REST link\n\t */\n\tgetItemLink: function (workspaceId, dmsId) {\n\t\tvar ret = '';\n\t\tangular.forEach(this.json.items, function (item) {\n\t\t\tif (item.dmsId === dmsId) {\n\t\t\t\tret = item.link.replace('[workspaceId]', workspaceId);\n\t\t\t}\n\t\t});\n\t\treturn ret;\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Items#setItemObj\n\t * @methodOf Models.Items\n\t * @description Attaches the item object to the tree\n\t *\n\t * @param {Number} dmsId The ID of the item to be stored\n\t * @param {Object} obj The item object\n\t */\n\tsetItemObj: function (dmsId, obj) {\n\t\tangular.forEach(this.json.items, function (item) {\n\t\t\tif (item.dmsId === dmsId) {\n\t\t\t\titem.obj = obj;\n\t\t\t}\n\t\t});\n\t}\n};\n\nangular.module('plm360.models').factory('Items', [\n\t'RESTWrapperService',\n\t'$q',\n\t'EventService',\n\t'UrnParser',\n\tfunction (RESTWrapperService, $q, EventService, UrnParser) {\n\t\tvar models = {};\n\t\tItems.prototype.RESTWrapperService = RESTWrapperService;\n\t\tItems.prototype.$q = $q;\n\t\tItems.prototype.UrnParser = UrnParser;\n\t\tEventService.listen('items:*:get', function (event, params, requestParams) {\n\t\t\tvar model = models[params] || new Items();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params, requestParams, event.split(':')[1]).then(function (obj) {\n\t\t\t\tEventService.send('items:' + event.split(':')[1] + ':done', obj);\n\t\t\t});\n\t\t});\n\t\treturn Items;\n\t}\n]);\n"]}