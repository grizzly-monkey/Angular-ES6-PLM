{"version":3,"sources":["../../../scripts/models/LinkableItems.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;AAab,IAAI,aAAa,GAAG,SAAhB,aAAa,GAAe;AAC/B,KAAI,IAAI,GAAG,IAAI,CAAC;CAChB,CAAC;;AAEF,aAAa,CAAC,SAAS,GAAG;;;;;;;;;;;;AAYzB,MAAK,EAAE,eAAU,IAAI,EAAE,MAAM,EAAE;AAC9B,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,SAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE;AACjG,OAAI,CAAC,IAAI,GAAG,OAAO,CAAC;AACpB,UAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,YAAY,EAAE,KAAK,EAAE;;AAE/D,QAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,YAAY,CAAC,YAAY,CAAC,CAAC;IACxD,EAAE,IAAI,CAAC,CAAC;AACT,UAAO,IAAI,CAAC;GACZ,CAAC,CAAC;EACH;;;;;;;;;;AAUD,YAAW,EAAE,uBAAY;AACxB,SAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EACrC;;;;;;;;;;AAUD,cAAa,EAAE,yBAAY;AAC1B,SAAO,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;EAC5B;;;;;;;;;;AAUD,OAAM,EAAE,kBAAY;AACnB,SAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;EACxB;;;;;;;;;;AAUD,YAAW,EAAE,uBAAY;AACxB,SAAO,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;EACnD;;;;;;;;;;AAUD,UAAS,EAAE,qBAAY;AACtB,SAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;EAC9B;CACD,CAAC;;AAEF,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,CACxD,oBAAoB,EACpB,cAAc,EACd,UAAU,kBAAkB,EAAE,YAAY,EAAE;AAC3C,KAAI,MAAM,GAAG,EAAE,CAAC;AAChB,cAAa,CAAC,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;;AAEhE,aAAY,CAAC,MAAM,CAAC,qBAAqB,EAAE,UAAU,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE;AAClF,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,aAAa,EAAE,CAAC;AAClD,QAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AACvB,OAAK,CAAC,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACtD,eAAY,CAAC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;GACzE,CAAC,CAAC;EACH,CAAC,CAAC;;AAEH,QAAO,aAAa,CAAC;CACrB,CACD,CAAC,CAAC","file":"LinkableItems.js","sourcesContent":["'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name Models.LinkableItems\r\n *\r\n * @description This class wraps a list of LinkableItems payload into an object\r\n *\r\n * ##Dependencies\r\n *\r\n */\r\n\r\n// Define the constructor\r\nvar LinkableItems = function () {\r\n\tvar that = this;\r\n};\r\n\r\nLinkableItems.prototype = {\r\n\t/**\r\n\t * @ngdoc method\r\n\t * @name Models.LinkableItems#fetch\r\n\t * @methodOf Models.LinkableItems\r\n\t * @description Make a call to fetch raw data\r\n\t *\r\n\t * @param {String} link The URL to use for fetching the data\r\n\t * @param {Object} params The parameters used for fetching (ex. page, page size, etc.)\r\n\t *\r\n\t * @returns {Object} An object representation of the formatted data\r\n\t */\r\n\tfetch: function (link, params) {\r\n\t\tvar that = this;\r\n\t\treturn this.RESTWrapperService.get(link, null, params, {skipCache: true}).then(function (payload) {\r\n\t\t\tthat.json = payload;\r\n\t\t\tangular.forEach(that.json.items, function (linkableItem, index) {\r\n\t\t\t\t/* global LinkableItem */\r\n\t\t\t\tthat.json.items[index] = new LinkableItem(linkableItem);\r\n\t\t\t}, that);\r\n\t\t\treturn that;\r\n\t\t});\r\n\t},\r\n\r\n\t/**\r\n\t * @ngdoc method\r\n\t * @name Models.LinkableItems#getFullList\r\n\t * @methodOf Models.LinkableItems\r\n\t * @description Returns the full list of data\r\n\t *\r\n\t * @returns {Array} The full list of data\r\n\t */\r\n\tgetFullList: function () {\r\n\t\treturn angular.copy(this.json.items);\r\n\t},\r\n\r\n\t/**\r\n\t * @ngdoc method\r\n\t * @name Models.LinkableItems#getTotalCount\r\n\t * @methodOf Models.LinkableItems\r\n\t * @description Returns the total count of the items\r\n\t *\r\n\t * @returns {Number} the total count of the items.\r\n\t */\r\n\tgetTotalCount: function () {\r\n\t\treturn this.json.totalCount;\r\n\t},\r\n\r\n\t/**\r\n\t * @ngdoc method\r\n\t * @name Models.LinkableItems#isNext\r\n\t * @methodOf Models.LinkableItems\r\n\t * @description Returns true, if next page exists\r\n\t *\r\n\t * @returns {Boolean} true, if next page exists\r\n\t */\r\n\tisNext: function () {\r\n\t\treturn !!this.json.next;\r\n\t},\r\n\r\n\t/**\r\n\t * @ngdoc method\r\n\t * @name Models.LinkableItems#getNextLink\r\n\t * @methodOf Models.LinkableItems\r\n\t * @description Returns a link to fetch next page if next page exists\r\n\t *\r\n\t * @returns {String} a link to fetch next page if next page exists\r\n\t */\r\n\tgetNextLink: function () {\r\n\t\treturn this.json.next ? this.json.next.link : null;\r\n\t},\r\n\r\n\t/**\r\n\t * @ngdoc method\r\n\t * @name Models.LinkableItems#getLength\r\n\t * @methodOf Models.LinkableItems\r\n\t * @description Returns the size of the list\r\n\t *\r\n\t * @returns {Number} the size of the list\r\n\t */\r\n\tgetLength: function () {\r\n\t\treturn this.json.items.length;\r\n\t}\r\n};\r\n\r\nangular.module('plm360.models').factory('LinkableItems', [\r\n\t'RESTWrapperService',\r\n\t'EventService',\r\n\tfunction (RESTWrapperService, EventService) {\r\n\t\tvar models = {};\r\n\t\tLinkableItems.prototype.RESTWrapperService = RESTWrapperService;\r\n\r\n\t\tEventService.listen('linkableItems:*:get', function (event, params, requestParams) {\r\n\t\t\tvar model = models[params] || new LinkableItems();\r\n\t\t\tmodels[params] = model;\r\n\t\t\tmodel.fetch(params, requestParams).then(function (obj) {\r\n\t\t\t\tEventService.send('linkableItems:' + event.split(':')[1] + ':done', obj);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\treturn LinkableItems;\r\n\t}\r\n]);\r\n"]}