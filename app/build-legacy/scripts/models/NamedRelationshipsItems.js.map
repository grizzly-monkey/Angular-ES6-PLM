{"version":3,"sources":["../../../scripts/models/NamedRelationshipsItems.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;AAab,IAAI,uBAAuB,GAAG,SAA1B,uBAAuB,GAAe,EAAE,CAAC;;AAE7C,uBAAuB,CAAC,SAAS,GAAG;;;;;;;;;;;;AAYnC,MAAK,EAAE,eAAU,IAAI,EAAE,MAAM,EAAE;AAC9B,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,SAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE;AAClF,OAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAChB,UAAO,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,UAAU,IAAI,EAAE,KAAK,EAAE;;AAErD,QAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,sBAAsB,CAAC,IAAI,CAAC,CAAC;IACrD,EAAE,IAAI,CAAC,CAAC;AACT,UAAO,IAAI,CAAC;GACZ,CAAC,CAAC;EACH;;;;;;;;;;AAUD,YAAW,EAAE,uBAAY;AACxB,SAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;EAChC;CACD,CAAC;;AAEF,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,yBAAyB,EAAE,CAClE,oBAAoB,EACpB,cAAc,EACd,UAAU,kBAAkB,EAAE,YAAY,EAAE;AAC3C,KAAI,MAAM,GAAG,EAAE,CAAC;AAChB,wBAAuB,CAAC,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;;AAE1E,aAAY,CAAC,MAAM,CAAC,sBAAsB,EAAE,UAAU,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE;AACnF,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,uBAAuB,EAAE,CAAC;AAC5D,QAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AACvB,OAAK,CAAC,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACtD,eAAY,CAAC,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;GAC1E,CAAC,CAAC;EACH,CAAC,CAAC;;AAEH,QAAO,uBAAuB,CAAC;CAC/B,CACD,CAAC,CAAC","file":"NamedRelationshipsItems.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.NamedRelationshipsItems\n *\n * @description This class wraps a list of NamedRelationshipsItems payload into an object.\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar NamedRelationshipsItems = function () {};\n\nNamedRelationshipsItems.prototype = {\n\t/**\n\t * @ngdoc method\n\t * @name Models.NamedRelationshipsItems#fetch\n\t * @methodOf Models.NamedRelationshipsItems\n\t * @description Make a call to fetch raw data.\n\t *\n\t * @param {String} link\t\tThe URL to use for fetching the data.\n\t * @param {Object} params\tThe parameters used for fetching (ex. page, page size, etc.).\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link, params) {\n\t\tvar that = this;\n\t\treturn this.RESTWrapperService.get(link, null, params, {}).then(function (payload) {\n\t\t\tthat.array = [];\n\t\t\tangular.forEach(payload.items, function (item, index) {\n\t\t\t\t/* global NamedRelationshipsItem */\n\t\t\t\tthat.array[index] = new NamedRelationshipsItem(item);\n\t\t\t}, that);\n\t\t\treturn that;\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.NamedRelationshipsItems#getFullList\n\t * @methodOf Models.NamedRelationshipsItems\n\t * @description Returns the full list of data.\n\t *\n\t * @returns {Array} The full list of data.\n\t */\n\tgetFullList: function () {\n\t\treturn angular.copy(this.array);\n\t}\n};\n\nangular.module('plm360.models').factory('NamedRelationshipsItems', [\n\t'RESTWrapperService',\n\t'EventService',\n\tfunction (RESTWrapperService, EventService) {\n\t\tvar models = {};\n\t\tNamedRelationshipsItems.prototype.RESTWrapperService = RESTWrapperService;\n\n\t\tEventService.listen('namedRelations:*:get', function (event, params, requestParams) {\n\t\t\tvar model = models[params] || new NamedRelationshipsItems();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params, requestParams).then(function (obj) {\n\t\t\t\tEventService.send('namedRelations:' + event.split(':')[1] + ':done', obj);\n\t\t\t});\n\t\t});\n\n\t\treturn NamedRelationshipsItems;\n\t}\n]);\n"]}