{"version":3,"sources":["../../../scripts/models/Groups.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;AAab,IAAI,MAAM,GAAG,SAAT,MAAM,GAAe,EACxB,CAAC;;AAEF,MAAM,CAAC,SAAS,GAAG;;;;;;;;;;;AAWlB,MAAK,EAAE,eAAU,IAAI,EAAE;AACtB,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,SAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE;AAChF,OAAI,CAAC,IAAI,GAAG,OAAO,CAAC;AACpB,UAAO,IAAI,CAAC;GACZ,CAAC,CAAC;EACH;CACD,CAAC;;AAEF,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,CACjD,oBAAoB,EACpB,cAAc,EACd,UAAU,kBAAkB,EAAE,YAAY,EAAE;AAC3C,KAAI,MAAM,GAAG,EAAE,CAAC;AAChB,OAAM,CAAC,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;AACzD,OAAM,CAAC,SAAS,CAAC,YAAY,GAAG,YAAY,CAAC;AAC7C,aAAY,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,KAAK,EAAE,MAAM,EAAE;AACtD,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,EAAE,CAAC;AAC3C,QAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AACvB,OAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACvC,eAAY,CAAC,IAAI,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAC;GAC/C,CAAC,CAAC;EACH,CAAC,CAAC;AACH,QAAO,MAAM,CAAC;CACd,CACD,CAAC,CAAC","file":"Groups.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.this\n *\n * @description This class wraps a groups payload into an object\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar Groups = function () {\n};\n\nGroups.prototype = {\n\t/**\n\t * @ngdoc method\n\t * @name Models.this#fetch\n\t * @methodOf Models.this\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link) {\n\t\tvar that = this;\n\t\treturn this.RESTWrapperService.get(link, null, null, {}).then(function (payload) {\n\t\t\tthat.json = payload;\n\t\t\treturn that;\n\t\t});\n\t}\n};\n\nangular.module('plm360.models').factory('Groups', [\n\t'RESTWrapperService',\n\t'EventService',\n\tfunction (RESTWrapperService, EventService) {\n\t\tvar models = {};\n\t\tGroups.prototype.RESTWrapperService = RESTWrapperService;\n\t\tGroups.prototype.EventService = EventService;\n\t\tEventService.listen('groups', function (event, params) {\n\t\t\tvar model = models[params] || new Groups();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params).then(function (obj) {\n\t\t\t\tEventService.send('availableGroups:done', obj);\n\t\t\t});\n\t\t});\n\t\treturn Groups;\n\t}\n]);\n"]}