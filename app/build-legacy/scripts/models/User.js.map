{"version":3,"sources":["../../../scripts/models/User.js"],"names":[],"mappings":"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","file":"User.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.User\n *\n * @description This class wraps a user payload into an object\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar User = function (json) {\n\tthis.json = json;\n\tthis.permissions = {};\n};\n\nUser.prototype = {\n\t/**\n\t * @ngdoc method\n\t * @name Models.User#fetch\n\t * @methodOf Models.User\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link) {\n\t\tvar that = this;\n\t\treturn this.RESTWrapperService.get(link, null, null, {}).then(function (payload) {\n\t\t\tthat.json = payload;\n\t\t\treturn that;\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.User#getDateFormat\n\t * @methodOf Models.User\n\t * @description Returns the date format of the current user\n\t *\n\t * @returns {string} A string representation of the date format of the current user\n\t */\n\tgetDateFormat: function () {\n\t\tif (this.json && this.json.dateFormat && this.json.dateFormat.indexOf('.') !== -1) {\n\t\t\tvar convertedDateFormat = this.json.dateFormat;\n\t\t\treturn convertedDateFormat.replace(/[.]/g, '/');\n\t\t} else {\n\t\t\treturn this.json.dateFormat;\n\t\t}\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.User#setPermissions\n\t * @methodOf Models.User\n\t * @description Sets the permissions object\n\t *\n\t * @param {Object} permissions The permission object to be associated with this user\n\t *\n\t */\n\tsetPermissions: function (permissions) {\n\t\tthis.permissions = permissions;\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.User#hasPermission\n\t * @methodOf Models.User\n\t * @description Returns whether the user has permission perm\n\t *\n\t * @param {Number} perm The permission to be checked (@see plm360.permissions.PLMPermissions)\n\t *\n\t * @returns {Boolean} True if user has permission\n\t */\n\thasPermission: function (perm) {\n\t\treturn this.permissions.hasPermission && this.permissions.hasPermission(perm);\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.User#getId\n\t * @methodOf Models.User\n\t * @description Returns the id of the current user\n\t *\n\t * @returns {String} A string representation of the id of the current user\n\t */\n\tgetId: function () {\n\t\treturn this.json.id;\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.User#getDisplayName\n\t * @methodOf Models.User\n\t * @description Returns the display name of the current user\n\t *\n\t * @returns {string} A string representation of the display name of the current user\n\t */\n\tgetDisplayName: function () {\n\t\treturn this.json.displayName;\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.User#getEmail\n\t * @methodOf Models.User\n\t * @description Returns the email of the current user\n\t *\n\t * @returns {string} A string representation of the email of the current user\n\t */\n\tgetEmail: function () {\n\t\treturn this.json.email;\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.User#getProfileImage\n\t * @methodOf Models.User\n\t * @description Returns the profile image paths\n\t *\n\t * @returns {Object} The profile image paths\n\t */\n\tgetProfileImage: function () {\n\t\treturn {\n\t\t\tsmall: this.json.imageSizeSmall || 'images/avatar_generic_x20.png',\n\t\t\tmedium: this.json.imageSizeMedium || 'images/avatar_generic_x35.png'\n\t\t};\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.User#getInterfaceStyle\n\t * @methodOf Models.User\n\t * @description Returns the selected interface style (NextPLM360|ClassicPLM360) for the current user\n\t *\n\t * @returns {string} A string representation of the interface style of the current user\n\t */\n\tgetInterfaceStyle: function () {\n\t\treturn this.json.interfaceStyle;\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.User#getTimeZone\n\t * @methodOf Models.User\n\t * @description Returns the selected timezone for the current user\n\t *\n\t * @returns {string} A string representation of the timezone of the current user\n\t */\n\tgetTimeZone: function () {\n\t\treturn this.json.timezone;\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.User#setDefaultInterface\n\t * @methodOf Models.User\n\t * @description Sets the default interface style of the user\n\t *\n\t * @returns {Promise} A promise that waits for the response from the endpoint\n\t */\n\tsetDefaultInterface: function (interfaceName, link) {\n\t\tvar data = [{op: 'replace', path: '/interfaceStyle', value: interfaceName}];\n\t\tvar headers = {'Content-Type': 'application/json-patch+json'};\n\t\treturn this.RESTWrapperService.patch(data, link, null, null, headers);\n\t}\n};\n\nangular.module('plm360.models').factory('User', [\n\t'RESTWrapperService',\n\t'EventService',\n\tfunction (RESTWrapperService, EventService) {\n\t\tvar models = {};\n\t\tUser.prototype.RESTWrapperService = RESTWrapperService;\n\t\tUser.prototype.EventService = EventService;\n\t\tEventService.listen('user:*:get', function (event, params) {\n\t\t\tvar model = models[params] || new User();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params).then(function (obj) {\n\t\t\t\tEventService.send('user:' + event.split(':')[1] + ':done', obj);\n\t\t\t});\n\t\t});\n\t\treturn User;\n\t}\n]);\n"]}