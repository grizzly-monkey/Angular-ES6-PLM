{"version":3,"sources":["../../../scripts/models/ActionNotifications.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;AAab,IAAI,mBAAmB,GAAG,SAAtB,mBAAmB,GAAe,EACrC,CAAC;;AAEF,mBAAmB,CAAC,SAAS,GAAG;;;;;;;;;;;;AAY/B,MAAK,EAAE,eAAU,IAAI,EAAE,MAAM,EAAE;AAC9B,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,SAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE;AAClF,OAAI,CAAC,IAAI,GAAG,EAAE,CAAC;AACf,OAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;AACvB,WAAO,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,IAAI,EAAE,KAAK,EAAE;;AAE/C,SAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;KACtE,EAAE,IAAI,CAAC,CAAC;IACT;AACD,UAAO,IAAI,CAAC;GACZ,CAAC,CAAC;EACH;;;;;;;;;;AAUD,YAAW,EAAE,uBAAY;AACxB,SAAO,IAAI,CAAC,IAAI,CAAC;EACjB;CACD,CAAC;;AAEF,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAC9D,oBAAoB,EACpB,cAAc,EACd,IAAI,EACJ,UAAU,kBAAkB,EAAE,YAAY,EAAE,EAAE,EAAE;AAC/C,KAAI,MAAM,GAAG,EAAE,CAAC;AAChB,oBAAmB,CAAC,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;AACtE,oBAAmB,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,CAAC;AACtC,aAAY,CAAC,MAAM,CAAC,0BAA0B,EAAE,UAAU,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE;AACvF,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,mBAAmB,EAAE,CAAC;AACxD,QAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AACvB,OAAK,CAAC,KAAK,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACtD,eAAY,CAAC,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;GAC9E,CAAC,CAAC;EACH,CAAC,CAAC;AACH,QAAO,mBAAmB,CAAC;CAC3B,CACD,CAAC,CAAC","file":"ActionNotifications.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.ActionNotifications\n *\n * @description This class wraps a list of ActionNotifications payload into an object\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar ActionNotifications = function () {\n};\n\nActionNotifications.prototype = {\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.ActionNotifications#fetch\n\t * @methodOf Models.ActionNotifications\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link, params) {\n\t\tvar that = this;\n\t\treturn this.RESTWrapperService.get(link, null, params, {}).then(function (payload) {\n\t\t\tthat.json = [];\n\t\t\tif (payload.length > 0) {\n\t\t\t\tangular.forEach(payload, function (item, index) {\n\t\t\t\t\t/* global ActionNotification */\n\t\t\t\t\tthat.json.push(new ActionNotification(item, this.RESTWrapperService));\n\t\t\t\t}, that);\n\t\t\t}\n\t\t\treturn that;\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.ActionNotifications#getFullList\n\t * @methodOf Models.ActionNotifications\n\t * @description Returns the full list of data\n\t *\n\t * @returns {Array} The full list of data\n\t */\n\tgetFullList: function () {\n\t\treturn this.json;\n\t}\n};\n\nangular.module('plm360.models').factory('ActionNotifications', [\n\t'RESTWrapperService',\n\t'EventService',\n\t'$q',\n\tfunction (RESTWrapperService, EventService, $q) {\n\t\tvar models = {};\n\t\tActionNotifications.prototype.RESTWrapperService = RESTWrapperService;\n\t\tActionNotifications.prototype.$q = $q;\n\t\tEventService.listen('actionNotification:*:get', function (event, params, requestParams) {\n\t\t\tvar model = models[params] || new ActionNotifications();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params, requestParams).then(function (obj) {\n\t\t\t\tEventService.send('actionNotification:' + event.split(':')[1] + ':done', obj);\n\t\t\t});\n\t\t});\n\t\treturn ActionNotifications;\n\t}\n]);\n"]}