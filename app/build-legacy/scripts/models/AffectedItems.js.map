{"version":3,"sources":["../../../scripts/models/AffectedItems.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;AAab,IAAI,aAAa,GAAG,SAAhB,aAAa,GAAe,EAC/B,CAAC;;AAEF,aAAa,CAAC,SAAS,GAAG;;;;;;;;;;;AAWzB,MAAK,EAAE,eAAU,IAAI,EAAE;AACtB,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,SAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE;AAChF,OAAI,CAAC,IAAI,GAAG,EAAE,CAAC;AACf,UAAO,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,EAAE,UAAU,IAAI,EAAE,KAAK,EAAE;;AAE7D,QAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;IAC1C,EAAE,IAAI,CAAC,CAAC;AACT,UAAO,IAAI,CAAC;GACZ,CAAC,CAAC;EACH;;;;;;;;;;AAUD,YAAW,EAAE,uBAAY;AACxB,SAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC/B;;;;;;;;;;;AAWD,YAAW,EAAE,qBAAU,KAAK,EAAE;AAC7B,MAAI,CAAC,IAAI,GAAG,EAAE,CAAC;;;AAGf,SAAO,CAAC,OAAO,CAAC,KAAK,EAAE,UAAU,IAAI,EAAE,KAAK,EAAE;AAC7C,OAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GAC/C,EAAE,IAAI,CAAC,CAAC;EACT;;;;;;;;;;;;AAYD,KAAI,EAAE,cAAU,EAAE,EAAE;AACnB,SAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,UAAU,IAAI,EAAE;AACjD,UAAO,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC;GAC5B,CAAC,CAAC;EACH;CACD,CAAC;;AAEF,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,CACxD,oBAAoB,EACpB,cAAc,EACd,UAAU,kBAAkB,EAAE,YAAY,EAAE;AAC3C,KAAI,MAAM,GAAG,EAAE,CAAC;AAChB,cAAa,CAAC,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;AAChE,aAAY,CAAC,MAAM,CAAC,qBAAqB,EAAE,UAAU,KAAK,EAAE,MAAM,EAAE;AACnE,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,aAAa,EAAE,CAAC;AAClD,QAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AACvB,OAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACvC,eAAY,CAAC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;GACzE,CAAC,CAAC;EACH,CAAC,CAAC;AACH,QAAO,aAAa,CAAC;CACrB,CACD,CAAC,CAAC","file":"AffectedItems.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.AffectedItems\n *\n * @description This class wraps a list of AffectedItems payload into an object\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar AffectedItems = function () {\n};\n\nAffectedItems.prototype = {\n\t/**\n\t * @ngdoc method\n\t * @name Models.AffectedItems#fetch\n\t * @methodOf Models.AffectedItems\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link) {\n\t\tvar that = this;\n\t\treturn this.RESTWrapperService.get(link, null, null, {}).then(function (payload) {\n\t\t\tthat.json = [];\n\t\t\tangular.forEach(payload.affectedItems, function (item, index) {\n\t\t\t\t/* global AffectedItem */\n\t\t\t\tthat.json[index] = new AffectedItem(item);\n\t\t\t}, that);\n\t\t\treturn that;\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.AffectedItems#getFullList\n\t * @methodOf Models.AffectedItems\n\t * @description Returns the full list of data\n\t *\n\t * @returns {Array} The full list of data\n\t */\n\tgetFullList: function () {\n\t\treturn angular.copy(this.json);\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.AffectedItems#setFullList\n\t * @methodOf Models.AffectedItems\n\t * @description Sets again the data based on added items\n\t *\n\t * @param {Array} array \tThe array containing a list of affected items to be updated here\n\t *\n\t */\n\tsetFullList: function (array) {\n\t\tthis.json = [];\n\n\t\t// Iterates through the supplied array to re-set the affected items again\n\t\tangular.forEach(array, function (item, index) {\n\t\t\tthis.json[index] = new AffectedItem(item.json);\n\t\t}, this);\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.AffectedItems#find\n\t * @methodOf Models.AffectedItems\n\t * @description Returns the requested AffectedItem object\n\t *\n\t * @param {Number} id The ID of the affected item to be found\n\t *\n\t * @returns {AffectedItem} The affected item object\n\t */\n\tfind: function (id) {\n\t\treturn _.find(this.getFullList(), function (item) {\n\t\t\treturn +item.getId() === id;\n\t\t});\n\t}\n};\n\nangular.module('plm360.models').factory('AffectedItems', [\n\t'RESTWrapperService',\n\t'EventService',\n\tfunction (RESTWrapperService, EventService) {\n\t\tvar models = {};\n\t\tAffectedItems.prototype.RESTWrapperService = RESTWrapperService;\n\t\tEventService.listen('affectedItems:*:get', function (event, params) {\n\t\t\tvar model = models[params] || new AffectedItems();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params).then(function (obj) {\n\t\t\t\tEventService.send('affectedItems:' + event.split(':')[1] + ':done', obj);\n\t\t\t});\n\t\t});\n\t\treturn AffectedItems;\n\t}\n]);\n"]}