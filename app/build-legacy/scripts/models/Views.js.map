{"version":3,"sources":["../../../scripts/models/Views.js"],"names":[],"mappings":"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","file":"Views.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.Views\n *\n * @description This class wraps a list of views payload into an object\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar Views = function () {\n};\n\n/**\n * @ngdoc method\n * @name Models.Views#getViewId\n * @methodOf Models.Views\n * @description Parse the id of a view using the link\n *\n * @param {String} link The URL where the id is extracted from\n *\n * @returns {Integer} Id of the View\n */\nfunction getViewId(link) {\n\treturn parseInt(link.substring(link.lastIndexOf('/') + 1));\n}\n\nViews.prototype = {\n\t/**\n\t * @ngdoc method\n\t * @name Models.Views#fetch\n\t * @methodOf Models.Views\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link) {\n\t\tvar that = this;\n\t\treturn this.RESTWrapperService.get(link, null, null, {}).then(function (payload) {\n\t\t\tthat.json = payload;\n\t\t\tif (angular.isDefined(that.json) && angular.isDefined(that.json.items)) {\n\t\t\t\tthat.json.items.forEach(function (view) {\n\t\t\t\t\tview.link = 'api/v3/workspaces/[workspaceId]/reports/' + getViewId(view.link);\n\t\t\t\t\tview.id = getViewId(view.link);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn that;\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Views#getFullList\n\t * @methodOf Models.Views\n\t * @description Returns the full list of data\n\t *\n\t * @returns {Array} The full list of data\n\t */\n\tgetFullList: function () {\n\t\tif (angular.isDefined(this.json.items)) {\n\t\t\treturn angular.copy(this.json.items);\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Views#getDefaultViewId\n\t * @methodOf Models.Views\n\t * @description Returns the view that was set as default, first one if none\n\t *\n\t * @returns {Object} The view id of the default view\n\t */\n\tgetDefaultViewId: function () {\n\t\tif (angular.isUndefined(this.json) || angular.isUndefined(this.json.items)) {\n\t\t\treturn {};\n\t\t}\n\t\treturn getViewId(this.json.items[0].link);\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Views#getViewLink\n\t * @methodOf Models.Views\n\t * @description Returns the view items link\n\t *\n\t * @param {Number} viewId The ID of the view whose items to retrieve\n\t *\n\t * @returns {String} The link for the view whose items to retrieve\n\t */\n\tgetViewLink: function (viewId) {\n\t\tif (angular.isUndefined(this.json) || angular.isUndefined(this.json.items)) {\n\t\t\treturn '';\n\t\t}\n\t\tvar viewObj = '';\n\n\t\tthis.json.items.forEach(function (view) {\n\t\t\tif (getViewId(view.link) === parseInt(viewId)) {\n\t\t\t\tviewObj = view.link;\n\t\t\t}\n\t\t});\n\n\t\treturn viewObj;\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Views#getViewLink\n\t * @methodOf Models.Views\n\t * @description Returns the view items link\n\t *\n\t * @param {Number} viewId The ID of the view whose items to retrieve\n\t * @param {Object} obj The object to be stored\n\t *\n\t */\n\tsetViewObj: function (viewId, obj) {\n\t\tif (angular.isUndefined(this.json) || angular.isUndefined(this.json.items)) {\n\t\t\treturn '';\n\t\t}\n\t\tvar viewObj = '';\n\n\t\tthis.json.items.forEach(function (view) {\n\t\t\tif (getViewId(view.link) === viewId) {\n\t\t\t\tview.obj = obj;\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Views#getView\n\t * @methodOf Models.Views\n\t * @description Returns the view that was set as default, first one if none\n\t *\n\t * @param {Number} viewId The ID of the view to retrieve\n\t *\n\t * @returns {Object} The view definition of the default view\n\t */\n\tgetView: function (viewId) {\n\t\tif (angular.isUndefined(this.json) || angular.isUndefined(this.json.items)) {\n\t\t\treturn {};\n\t\t}\n\t\tvar viewObj = {};\n\t\tthis.json.items.forEach(function (view) {\n\t\t\tif (getViewId(view.link) === viewId) {\n\t\t\t\tviewObj = view;\n\t\t\t}\n\t\t});\n\n\t\treturn viewObj;\n\t}\n};\n\nangular.module('plm360.models').factory('Views', [\n\t'RESTWrapperService',\n\t'EventService',\n\tfunction (RESTWrapperService, EventService) {\n\t\tvar models = {};\n\t\tViews.prototype.RESTWrapperService = RESTWrapperService;\n\t\tEventService.listen('views:*:get', function (event, params) {\n\t\t\tvar model = models[params] || new Views();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params).then(function (obj) {\n\t\t\t\tEventService.send('views:' + event.split(':')[1] + ':done', obj);\n\t\t\t});\n\t\t});\n\t\treturn Views;\n\t}\n]);\n"]}