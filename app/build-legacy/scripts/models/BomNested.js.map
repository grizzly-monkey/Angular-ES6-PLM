{"version":3,"sources":["../../../scripts/models/BomNested.js"],"names":[],"mappings":"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","file":"BomNested.js","sourcesContent":["(function (module) {\n\t'use strict';\n\n\t/**\n\t * @ngdoc object\n\t * @name Models.BomNested\n\t *\n\t * @description This class wraps a list of BomNested payload into an object\n\t *\n\t * ##Dependencies\n\t *\n\t */\n\tfunction BomNested(json) {\n\t\tthis.json = json;\n\t\tthis.bomItems = [];\n\n\t\tif (this.json) {\n\t\t\tvar index = 0;\n\t\t\tfor (index = 0; index < this.json[0].items.length; index++) {\n\t\t\t\tvar bomItem = this.json[0].items[index];\n\t\t\t\tbomItem.id = this.extractBomItemIdsFromLink(bomItem.link);\n\t\t\t\tthis.bomItems.push(bomItem);\n\t\t\t}\n\t\t}\n\t}\n\n\tBomNested.prototype = {};\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.BomNested#fetch\n\t * @methodOf Models.BomNested\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tBomNested.prototype.fetch = function (link, params) {\n\t\tvar that = this;\n\t\treturn this.RESTWrapperService.get(link, null, params, {\n\t\t\tskipCache: true\n\t\t}).then(function (payload) {\n\t\t\treturn new BomNested(payload);\n\t\t});\n\t};\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.BomNested#extractBomItemIdsFromLink\n\t * @methodOf Models.BomNested\n\t * @description Extracts BomItem identifier from a given link\n\t *\n\t * @returns {String} The id for this bomitem\n\t */\n\tBomNested.prototype.extractBomItemIdsFromLink = function (link) {\n\t\treturn link.split('/').pop();\n\t};\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.BomNested#getSelfLink\n\t * @methodOf Models.BomNested\n\t * @description Returns the api link for this item\n\t *\n\t * @returns {Object} Link to object's api endpoint\n\t */\n\tBomNested.prototype.getSelfLink = function () {\n\t\treturn this.json[0].__self__.replace(/^\\//, '');\n\t};\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.BomNested#getBomItems\n\t * @methodOf Models.BomNested\n\t * @description Returns the full list of bom items\n\t *\n\t * @returns {Array} Collection of bom items\n\t */\n\tBomNested.prototype.getBomItems = function () {\n\t\treturn this.bomItems;\n\t};\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.BomNested#getBomMetaObj\n\t * @methodOf Models.BomNested\n\t * @description Returns the bom meta object\n\t *\n\t * @returns {Object} the bom meta data\n\t */\n\tBomNested.prototype.getBomMetaObj = function () {\n\t\treturn this.json[0];\n\t};\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.BomNested#getBomConfigObj\n\t * @methodOf Models.BomNested\n\t * @description Returns the bom configuration object\n\t *\n\t * @returns {Object} the bom configuration\n\t */\n\tBomNested.prototype.getBomConfigObj = function () {\n\t\treturn this.json[1];\n\t};\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.BomNested#find\n\t * @methodOf Models.BomNested\n\t * @description Returns the requested BomNestedItem object\n\t *\n\t * @param {Number} id The ID of the bom nested item to be found\n\t *\n\t * @returns {BomNestedItem} The bom nested item object\n\t */\n\tBomNested.prototype.find = function (id) {\n\t\treturn _.find(this.getBomItems(), function (item) {\n\t\t\treturn item.id === id;\n\t\t});\n\t};\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.BomNested#BomNestedFactory\n\t * @methodOf Models.BomNested\n\t * @description Factory to create a BomNested Model\n\t *\n\t * @returns {Object} BomNested Object\n\t */\n\tfunction BomNestedFactory(RESTWrapperService, EventService) {\n\t\tvar models = {};\n\t\tBomNested.prototype.RESTWrapperService = RESTWrapperService;\n\t\t// get\n\t\tEventService.listen('bomNested:*:get', function (event, eventId, params) {\n\t\t\tvar model = models[eventId] || new BomNested();\n\t\t\tmodels[eventId] = model;\n\t\t\tif (eventId) {\n\t\t\t\tmodel.fetch(eventId, params).then(function (obj) {\n\t\t\t\t\tEventService.send('bomNested:' + event.split(':')[1] + ':done', obj);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tEventService.send('bomNested:' + event.split(':')[1] + ':failed', null);\n\t\t\t}\n\t\t});\n\n\t\treturn BomNested;\n\t}\n\n\tmodule.factory('BomNested', ['RESTWrapperService', 'EventService', BomNestedFactory]);\n\n}(angular.module('plm360.models')));\n"]}