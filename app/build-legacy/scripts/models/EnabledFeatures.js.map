{"version":3,"sources":["../../../scripts/models/EnabledFeatures.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;AAab,IAAI,eAAe,GAAG,SAAlB,eAAe,GAAe,EAAE,CAAC;;AAErC,eAAe,CAAC,SAAS,GAAG;;;;;;;;;;;AAW3B,MAAK,EAAE,eAAU,IAAI,EAAE;AACtB,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,SAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE;AAChF,OAAI,CAAC,IAAI,GAAG,OAAO,CAAC;AACpB,UAAO,IAAI,CAAC;GACZ,CAAC,CAAC;EACH;;;;;;;;;;;AAWD,mBAAkB,EAAE,8BAAY;AAC/B,MAAI,GAAG,GAAG,EAAE,CAAC;;AAEb,MAAI,AAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAM,IAAI,CAAC,IAAI,KAAK,IAAI,AAAC,EAAE;AAC3D,MAAG,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAE9B,OAAI,WAAW,GAAG,EAAE,CAAC;;AAErB,UAAO,CAAC,OAAO,CAAC,GAAG,EAAE,UAAU,KAAK,EAAE,WAAW,EAAE;AAClD,QAAI,CAAC,KAAK,IAAK,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,GAAG,AAAC,EAAE;AAC3C,gBAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC9B,YAAO;KACP;IACD,CAAC,CAAC;;AAEH,OAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AACvB,QAAI,gBAAgB,GAAG,CAAC,CAAC;AACzB,WAAO,CAAC,OAAO,CAAC,WAAW,EAAE,UAAU,KAAK,EAAE;AAC7C,QAAG,CAAC,MAAM,CAAC,KAAK,GAAG,gBAAgB,EAAE,CAAC,CAAC,CAAC;AACxC,qBAAgB,EAAE,CAAC;KACnB,CAAC,CAAC;IACH,MAAM;AACN,OAAG,GAAG,EAAE,CAAC;IACT;GACD;;AAED,SAAO,EAAC,IAAI,EAAE,GAAG,EAAC,CAAC;EACnB;CACD,CAAC;;AAEF,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAC1D,oBAAoB,EACpB,cAAc,EACd,UAAU,kBAAkB,EAAE,YAAY,EAAE;AAC3C,KAAI,MAAM,GAAG,EAAE,CAAC;AAChB,gBAAe,CAAC,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;AAClE,aAAY,CAAC,MAAM,CAAC,uBAAuB,EAAE,UAAU,KAAK,EAAE,MAAM,EAAE;AACrE,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,eAAe,EAAE,CAAC;AACpD,QAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AACvB,OAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACvC,eAAY,CAAC,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;GAC3E,CAAC,CAAC;EACH,CAAC,CAAC;AACH,QAAO,eAAe,CAAC;CACvB,CACD,CAAC,CAAC","file":"EnabledFeatures.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.EnabledFeatures\n *\n * @description This class wraps a tenant's enabled features payload into an object\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar EnabledFeatures = function () {};\n\nEnabledFeatures.prototype = {\n\t/**\n\t * @ngdoc method\n\t * @name Models.EnabledFeatures#fetch\n\t * @methodOf Models.EnabledFeatures\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link) {\n\t\tvar that = this;\n\t\treturn this.RESTWrapperService.get(link, null, null, {}).then(function (payload) {\n\t\t\tthat.json = payload;\n\t\t\treturn that;\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.EnabledFeatures#getDisplayableData\n\t * @methodOf Models.EnabledFeatures\n\t * @description Returns formatted data of the enabled features\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t *\n\t */\n\tgetDisplayableData: function () {\n\t\tvar ret = {};\n\n\t\tif ((angular.isDefined(this.json)) && (this.json !== null)) {\n\t\t\tret = angular.copy(this.json);\n\n\t\t\tvar toBeSpliced = [];\n\n\t\t\tangular.forEach(ret, function (value, datalistkey) {\n\t\t\t\tif (!value || (!value.title && !value.urn)) {\n\t\t\t\t\ttoBeSpliced.push(datalistkey);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (Array.isArray(ret)) {\n\t\t\t\tvar decrementCounter = 0;\n\t\t\t\tangular.forEach(toBeSpliced, function (value) {\n\t\t\t\t\tret.splice(value - decrementCounter, 1);\n\t\t\t\t\tdecrementCounter++;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tret = [];\n\t\t\t}\n\t\t}\n\n\t\treturn {data: ret};\n\t}\n};\n\nangular.module('plm360.models').factory('EnabledFeatures', [\n\t'RESTWrapperService',\n\t'EventService',\n\tfunction (RESTWrapperService, EventService) {\n\t\tvar models = {};\n\t\tEnabledFeatures.prototype.RESTWrapperService = RESTWrapperService;\n\t\tEventService.listen('enabledFeatures:*:get', function (event, params) {\n\t\t\tvar model = models[params] || new EnabledFeatures();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params).then(function (obj) {\n\t\t\t\tEventService.send('enabledFeatures:' + event.split(':')[1] + ':done', obj);\n\t\t\t});\n\t\t});\n\t\treturn EnabledFeatures;\n\t}\n]);\n"]}