{"version":3,"sources":["../../../scripts/models/Revisions.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;AAab,IAAI,SAAS,GAAG,SAAZ,SAAS,GAAe,EAC3B,CAAC;;AAEF,SAAS,CAAC,SAAS,GAAG;;;;;;;;;;;AAWrB,MAAK,EAAE,eAAU,IAAI,EAAE;AACtB,MAAI,IAAI,GAAG,IAAI,CAAC;AAChB,SAAO,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,OAAO,EAAE;AAChF,OAAI,CAAC,IAAI,GAAG,OAAO,CAAC;AACpB,UAAO,IAAI,CAAC;GACZ,CAAC,CAAC;EACH;;;;;;;;;;AAUD,YAAW,EAAE,uBAAY;AACxB,SAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC/B;;;;;;;;;;AAUD,aAAY,EAAE,wBAAY;AACzB,SAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;EACzB;;;;;;;;;;;;;;;;;;;;CAoBD,CAAC;;AAEF,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CACpD,oBAAoB,EACpB,cAAc,EACd,UAAU,kBAAkB,EAAE,YAAY,EAAE;AAC3C,KAAI,MAAM,GAAG,EAAE,CAAC;AAChB,UAAS,CAAC,SAAS,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;AAC5D,aAAY,CAAC,MAAM,CAAC,qBAAqB,EAAE,UAAU,KAAK,EAAE,MAAM,EAAE;AACnE,MAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,SAAS,EAAE,CAAC;AAC9C,QAAM,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;AACvB,OAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG,EAAE;AACvC,eAAY,CAAC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC;GACzE,CAAC,CAAC;EACH,CAAC,CAAC;AACH,QAAO,SAAS,CAAC;CACjB,CACD,CAAC,CAAC","file":"Revisions.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Models.Revisions\n *\n * @description This class wraps a list of Revisions payload into an object\n *\n * ##Dependencies\n *\n */\n\n// Define the constructor\nvar Revisions = function () {\n};\n\nRevisions.prototype = {\n\t/**\n\t * @ngdoc method\n\t * @name Models.Revisions#fetch\n\t * @methodOf Models.Revisions\n\t * @description Make a call to fetch raw data\n\t *\n\t * @param {String} link The URL to use for fetching the data\n\t *\n\t * @returns {Object} An object representation of the formatted data\n\t */\n\tfetch: function (link) {\n\t\tvar that = this;\n\t\treturn this.RESTWrapperService.get(link, null, null, {}).then(function (payload) {\n\t\t\tthat.json = payload;\n\t\t\treturn that;\n\t\t});\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Revisions#getFullList\n\t * @methodOf Models.Revisions\n\t * @description Returns the full list of data\n\t *\n\t * @returns {Array} The full list of data\n\t */\n\tgetFullList: function () {\n\t\treturn angular.copy(this.json);\n\t},\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Revisions#getCurrentId\n\t * @methodOf Models.Revisions\n\t * @description Returns the ID of the current revision\n\t *\n\t * @returns {String} The ID of the current revision\n\t */\n\tgetCurrentId: function () {\n\t\treturn this.json.item.id;\n\t}\n\n\t/**\n\t * @ngdoc method\n\t * @name Models.Revisions#getSelectedRevision\n\t * @methodOf Models.Revisions\n\t * @description Returns the revision currently selected\n\t *\n\t * @returns {Object} The current revision\n\t */\n\t// getSelectedRevision: function () {\n\t// \tvar that = this;\n\t// \tvar ret = {};\n\t// \tangular.forEach(this.json.item.links, function (item, index) {\n\t// \t\tif (item.id === that.getCurrentId()) {\n\t// \t\t\tret = item;\n\t// \t\t}\n\t// \t});\n\t// \treturn ret;\n\t// }\n};\n\nangular.module('plm360.models').factory('Revisions', [\n\t'RESTWrapperService',\n\t'EventService',\n\tfunction (RESTWrapperService, EventService) {\n\t\tvar models = {};\n\t\tRevisions.prototype.RESTWrapperService = RESTWrapperService;\n\t\tEventService.listen('itemRevisions:*:get', function (event, params) {\n\t\t\tvar model = models[params] || new Revisions();\n\t\t\tmodels[params] = model;\n\t\t\tmodel.fetch(params).then(function (obj) {\n\t\t\t\tEventService.send('itemRevisions:' + event.split(':')[1] + ':done', obj);\n\t\t\t});\n\t\t});\n\t\treturn Revisions;\n\t}\n]);\n"]}