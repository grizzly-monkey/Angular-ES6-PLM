{"version":3,"sources":["../../../scripts/misc/HTTPInterceptor.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;AAcb,IAAI,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;;AAEhE,eAAe,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAC1C,IAAI,EACJ,MAAM,EACN,uBAAuB,EACvB,gBAAgB,EAChB,qCAAqC,EACrC,GAAG,EACH,UAAU,EAAE,EAAE,IAAI,EAAE,qBAAqB,EAAE,cAAc,EAAE,mBAAmB,EAAE,CAAC,EAAE;;AAElF,QAAO;AACN,SAAO,EAAE,iBAAU,MAAM,EAAE;;;;;AAK1B,OAAI,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE;AACrF,WAAO,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IACnC;;;;;AAKD,OAAI,MAAM,CAAC,MAAM,KAAK,MAAM,IAC3B,kBAAkB,IAAI,MAAM,CAAC,OAAO,IACpC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;AACxB,UAAM,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB;;AAED,OAAI,cAAc,CAAC,UAAU,IAAI,CAAC,EAAE;AACnC,QAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;IACtC;;AAED,sBAAmB,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;;AAEtD,UAAO,MAAM,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;GACjC;;AAED,cAAY,EAAE,sBAAU,SAAS,EAAE;AAClC,OAAI,cAAc,CAAC,UAAU,IAAI,CAAC,EAAE;AACnC,QAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC;IAC3C;;AAED,sBAAmB,CAAC,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;;AAExE,UAAO,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;GAC5B;;AAED,UAAQ,EAAE,kBAAU,SAAQ,EAAE;AAC7B,OAAI,cAAc,CAAC,UAAU,IAAI,CAAC,EAAE;AACnC,QAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,SAAQ,CAAC,CAAC;IACrC;;;AAGD,OAAI,OAAO,CAAC,SAAS,CAAC,SAAQ,CAAC,EAAE;AAChC,YAAQ,SAAQ,CAAC,MAAM;AACtB,UAAK,GAAG;;AACP,eAAQ,CAAC,IAAI,GAAG,EAAE,CAAC;AACnB,YAAM;AAAA,AACP;AACC,YAAM;AAAA,KACP;IACD;;AAED,sBAAmB,CAAC,cAAc,CAAC,SAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,SAAQ,CAAC,CAAC;;AAElE,UAAO,SAAQ,IAAI,EAAE,CAAC,IAAI,CAAC,SAAQ,CAAC,CAAC;GACrC;;AAED,eAAa,EAAE,uBAAU,SAAS,EAAE;;;;;;;AAOnC,OAAI,cAAc,CAAC,UAAU,IAAI,CAAC,EAAE;AACnC,QAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC;IAC5C;;AAED,sBAAmB,CAAC,mBAAmB,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;;AAEzE,UAAO,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;GAC5B;EACD,CAAC;CACF,CACD,CAAC,CAAC;;;AAGH,eAAe,CAAC,MAAM,CAAC,UAAU,aAAa,EAAE;AAC/C,cAAa,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;CACnD,CAAC,CAAC","file":"HTTPInterceptor.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Miscellaneous.httpInterceptor\n *\n * @description This defines the interceptor for all PLM360 ajax requests\n *\n * ##Dependencies\n * - Requires {@link Services/Services.TokenService}\n * - Requires {@link Services/Services.AuthenticationService}\n * - Requires {@link Configs/Configs.GlobalSettings}\n *\n */\nvar httpInterceptor = angular.module('plm.httpInterceptor', []);\n\nhttpInterceptor.factory('httpInterceptor', [\n\t'$q',\n\t'$log',\n\t'AuthenticationService',\n\t'GlobalSettings',\n\t'ADSK.HttpInterceptorService.service',\n\t'_',\n\tfunction ($q, $log, AuthenticationService, GlobalSettings, ADSKHttpInterceptor, _) {\n\n\t\treturn {\n\t\t\trequest: function (config) {\n\t\t\t\t// TODO: append the token for each request\n\t\t\t\t// Use TokenService\n\n\t\t\t\t// need to remove the extra originalElement attribute otherwise REST will throw error\n\t\t\t\tif (angular.isDefined(config.data) && angular.isDefined(config.data.originalElement)) {\n\t\t\t\t\tdelete config.data.originalElement;\n\t\t\t\t}\n\n\t\t\t\t// If POSTing with a Content-Location header, there should be\n\t\t\t\t// no post body (e.g. for adding linkable items to the Project\n\t\t\t\t// Management view)\n\t\t\t\tif (config.method === 'POST' &&\n\t\t\t\t\t'Content-Location' in config.headers &&\n\t\t\t\t\t_.isEmpty(config.data)) {\n\t\t\t\t\tconfig.data = null;\n\t\t\t\t}\n\n\t\t\t\tif (GlobalSettings.debugLevel >= 1) {\n\t\t\t\t\t$log.info('Requesting data:', config);\n\t\t\t\t}\n\n\t\t\t\tADSKHttpInterceptor.handleRequest(config.url, config);\n\n\t\t\t\treturn config || $q.when(config);\n\t\t\t},\n\n\t\t\trequestError: function (rejection) {\n\t\t\t\tif (GlobalSettings.debugLevel >= 0) {\n\t\t\t\t\t$log.error('Error on request:', rejection);\n\t\t\t\t}\n\n\t\t\t\tADSKHttpInterceptor.handleRequestError(rejection.config.url, rejection);\n\n\t\t\t\treturn $q.reject(rejection);\n\t\t\t},\n\n\t\t\tresponse: function (response) {\n\t\t\t\tif (GlobalSettings.debugLevel >= 2) {\n\t\t\t\t\t$log.log('Response data:', response);\n\t\t\t\t}\n\n\t\t\t\t// Intercept different status codes for response types\n\t\t\t\tif (angular.isDefined(response)) {\n\t\t\t\t\tswitch (response.status) {\n\t\t\t\t\t\tcase 204: // NO CONTENT, hence, empty object to simulate empty payload\n\t\t\t\t\t\t\tresponse.data = {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tADSKHttpInterceptor.handleResponse(response.config.url, response);\n\n\t\t\t\treturn response || $q.when(response);\n\t\t\t},\n\n\t\t\tresponseError: function (rejection) {\n\t\t\t\t// do something on error\n\t\t\t\t// if (canRecover(rejection)) {\n\t\t\t\t// \treturn responseOrNewPromise;\n\t\t\t\t// }\n\t\t\t\t// pendingRequests--;\n\n\t\t\t\tif (GlobalSettings.debugLevel >= 0) {\n\t\t\t\t\t$log.error('Error on response:', rejection);\n\t\t\t\t}\n\n\t\t\t\tADSKHttpInterceptor.handleResponseError(rejection.config.url, rejection);\n\n\t\t\t\treturn $q.reject(rejection);\n\t\t\t}\n\t\t};\n\t}\n]);\n\n// configure the interceptor\nhttpInterceptor.config(function ($httpProvider) {\n\t$httpProvider.interceptors.push('httpInterceptor');\n});\n"]}