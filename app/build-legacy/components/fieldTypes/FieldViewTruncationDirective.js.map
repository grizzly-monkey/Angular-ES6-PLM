{"version":3,"sources":["../../../components/fieldTypes/FieldViewTruncationDirective.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;AAwBb,OAAO,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,SAAS,CAAC,qBAAqB,EAAE,CACpE,UAAU,EACV,UAAU,EACV,SAAS,EACT,GAAG,EACH,UAAU,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,EAAE;AACzC,QAAO;AACN,UAAQ,EAAE,GAAG;AACb,OAAK,EAAE;AACN,QAAK,EAAE,GAAG;AACV,SAAM,EAAE,GAAG;AACX,eAAY,EAAE,GAAG;AACjB,OAAI,EAAE,GAAG;GACT;AACD,SAAO,EAAE,IAAI;AACb,aAAW,EAAE,gDAAgD;AAC7D,MAAI,EAAE,cAAU,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE;;;;;;;;;AAStC,OAAI,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC;;;;;;;;;AAS5B,OAAI,eAAe,GAAG,EAAE,CAAC;;;;;;;;;AASzB,QAAK,CAAC,MAAM,GAAG,AAAC,AAAC,KAAK,CAAC,IAAI,KAAK,OAAO,IAAM,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAI,KAAK,GAAG,IAAI,CAAC;;;;;;;;;AAS9F,QAAK,CAAC,cAAc,GAAG,AAAC,AAAC,KAAK,CAAC,YAAY,KAAK,OAAO,IAAM,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,AAAC,GAAI,KAAK,GAAG,IAAI,CAAC;;;;;;;;;AAStH,QAAK,CAAC,UAAU,GAAG,KAAK,CAAC;;;;;;;;;;;AAWzB,QAAK,CAAC,kBAAkB,GAAG,YAAY;;AAEtC,QAAI,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,eAAe,EAAE;AACvG,YAAO,IAAI,CAAC;KACZ,MAAM;AACN,YAAO,KAAK,CAAC;KACb;IACD,CAAC;;;;AAIF,WAAQ,CAAC,YAAY;;;;;;;;;AASpB,SAAK,CAAC,WAAW,GAAG,KAAK,CAAC,kBAAkB,EAAE,CAAC;;;;;;;;;AAS/C,SAAK,CAAC,wBAAwB,GAAG,KAAK,CAAC,WAAW,CAAC;IAEnD,EAAE,CAAC,CAAC,CAAC;;;;;;;;;;;AAWN,QAAK,CAAC,aAAa,GAAG,UAAU,IAAI,EAAE;AACrC,SAAK,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC;IAC1B,CAAC;;;;AAIF,UAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY;AACnD,SAAK,CAAC,WAAW,GAAG,KAAK,CAAC;AAC1B,SAAK,CAAC,wBAAwB,GAAG,KAAK,CAAC;;AAEvC,YAAQ,CAAC,YAAY;;AAEpB,UAAK,CAAC,WAAW,GAAG,KAAK,CAAC,kBAAkB,EAAE,CAAC;AAC/C,UAAK,CAAC,wBAAwB,GAAG,KAAK,CAAC,WAAW,CAAC;KACnD,EAAE,CAAC,CAAC,CAAC;IACN,CAAC,CAAC;GACH;EACD,CAAC;CACF,CACD,CAAC,CAAC","file":"FieldViewTruncationDirective.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc directive\n * @name Directives.fieldViewTruncation\n * @restrict A\n *\n * @description This directive is to be used inside fieldView, just to display a truncated value\n * ####- shouldTruncate {Boolean} If the truncation should happen\n * ####- value: {String} the plain string\n * ####- length: {Integer} the length\n * ####- preformatted: {Boolean} If should wrap the string using <pre> instead of <span>, to respect \"\\n\"\n * ####- html: {Boolean} If should display the passed string as HTML\n *\n * ##Dependencies\n *\n * @example\n * <doc:example>\n *   <doc:source>\n * \t\t<field-view-truncation value=\"String\" length=\"Integer\" preformatted=\"Boolean\" html=\"Boolean\" />\n *   </doc:source>\n * </doc:example>\n */\n\nangular.module('plm360.fieldTypes').directive('fieldViewTruncation', [\n\t'$compile',\n\t'$timeout',\n\t'$window',\n\t'_',\n\tfunction ($compile, $timeout, $window, _) {\n\t\treturn {\n\t\t\trestrict: 'E',\n\t\t\tscope: {\n\t\t\t\tvalue: '@',\n\t\t\t\tlength: '@',\n\t\t\t\tpreformatted: '@',\n\t\t\t\thtml: '@'\n\t\t\t},\n\t\t\treplace: true,\n\t\t\ttemplateUrl: 'components/fieldTypes/fieldViewTruncation.html',\n\t\t\tlink: function (scope, element, attrs) {\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name Directives.fieldViewTruncation#fullValue\n\t\t\t\t * @propertyOf Directives.fieldViewTruncation\n\t\t\t\t * @description `private` Stores the full value of this field, for truncation purposes\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tvar fullValue = scope.value;\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name Directives.fieldViewTruncation#isHTML\n\t\t\t\t * @propertyOf Directives.fieldViewTruncation\n\t\t\t\t * @description `private` Default line height size for bootstrap theme\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tvar themeLineHeight = 24;\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name Directives.fieldViewTruncation#isHTML\n\t\t\t\t * @propertyOf Directives.fieldViewTruncation\n\t\t\t\t * @description Set to true whenever the supplied string should be rendered as HTML, or false for everything else\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tscope.isHTML = ((scope.html === 'false') || (angular.isUndefined(scope.html))) ? false : true;\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name Directives.fieldViewTruncation#isPreformatted\n\t\t\t\t * @propertyOf Directives.fieldViewTruncation\n\t\t\t\t * @description Set to true whenever user is hovering elements relative to the field (such as the arrow for expanding/collapsing)\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tscope.isPreformatted = ((scope.preformatted === 'false') || (angular.isUndefined(scope.preformatted))) ? false : true;\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name Directives.fieldViewTruncation#isHovering\n\t\t\t\t * @propertyOf Directives.fieldViewTruncation\n\t\t\t\t * @description Set to true whenever user is hovering elements relative to the field (such as the arrow for expanding/collapsing)\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tscope.isHovering = false;\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc method\n\t\t\t\t * @name Directives.fieldViewTruncation#checkForTruncation\n\t\t\t\t * @methodOf Directives.fieldViewTruncation\n\t\t\t\t * @description Checks if a certain value should be truncated according to the scrollHeight/clientHeight\n\t\t\t\t *\n\t\t\t\t * @returns {Boolean} If the string should be truncated or not\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tscope.checkForTruncation = function () {\n\t\t\t\t\t// if this evaluates to true, then there's more content than one line (24 is the default height for this theme across browsers)\n\t\t\t\t\tif (angular.element(element[0].querySelector('.fieldvalue-wrapper'))[0].scrollHeight > themeLineHeight) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// this delay is necessary because we have to wait for the DOM to be rendered,\n\t\t\t\t// to then calculate the scrollHeight in checkForTruncation\n\t\t\t\t$timeout(function () {\n\n\t\t\t\t\t/**\n\t\t\t\t\t * @ngdoc property\n\t\t\t\t\t * @name Directives.fieldViewTruncation#isArray\n\t\t\t\t\t * @propertyOf Directives.fieldViewTruncation\n\t\t\t\t\t * @description Stores the status of truncation for the current value of this field\n\t\t\t\t\t *\n\t\t\t\t\t */\n\t\t\t\t\tscope.isTruncated = scope.checkForTruncation();\n\n\t\t\t\t\t/**\n\t\t\t\t\t * @ngdoc property\n\t\t\t\t\t * @name Directives.fieldViewTruncation#displayTruncationControl\n\t\t\t\t\t * @propertyOf Directives.fieldViewTruncation\n\t\t\t\t\t * @description Controls the displaying of the truncation control (arrow, or string)\n\t\t\t\t\t *\n\t\t\t\t\t */\n\t\t\t\t\tscope.displayTruncationControl = scope.isTruncated;\n\n\t\t\t\t}, 0);\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc method\n\t\t\t\t * @name Directives.fieldViewTruncation#setTruncation\n\t\t\t\t * @methodOf Directives.fieldViewTruncation\n\t\t\t\t * @description Sets the scope's truncation flag to true or not\n\t\t\t\t *\n\t\t\t\t * @param {Boolean} flag \tsets the scope's truncation flag to the boolean value passed to this method\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tscope.setTruncation = function (flag) {\n\t\t\t\t\tscope.isTruncated = !flag;\n\t\t\t\t};\n\n\t\t\t\t// hook up a listener to the window for resizes, to display/hide the truncation controls (and field truncation) accordingly\n\t\t\t\t// this is VERY expensive to do, unfortunately\n\t\t\t\tangular.element($window).bind('resize', function () {\n\t\t\t\t\tscope.isTruncated = false; // sets as false, so the truncation level can be recalculated\n\t\t\t\t\tscope.displayTruncationControl = false; // idem\n\n\t\t\t\t\t$timeout(function () {\n\t\t\t\t\t\t// sets scope variables again according to the rendered UI\n\t\t\t\t\t\tscope.isTruncated = scope.checkForTruncation();\n\t\t\t\t\t\tscope.displayTruncationControl = scope.isTruncated;\n\t\t\t\t\t}, 0);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n]);\n"]}