{"version":3,"sources":["../../../components/tabularDataWidget/TabularDataWidgetDirective.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEb,OAAO,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC,SAAS,CAAC,mBAAmB,EAAE,UAAU,QAAQ,EAAE;AAC7F,SAAO;AACN,YAAQ,EAAE,GAAG;AACb,YAAQ,EAAE,GAAG;AACb,cAAU,EAAE,6BAA6B;AACzC,WAAO,EAAE,IAAI;AACb,SAAK,EAAE;AACN,kBAAY,EAAE,UAAU;AACxB,eAAS,EAAE,OAAO;AAClB,mBAAa,EAAE,GAAG;AAClB,gBAAU,EAAE,GAAG;KACf;AACD,eAAW,EAAE,qDAAqD;AAClE,QAAI,EAAE,cAAU,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,2BAA2B,EAAE;;;;;;AAMnE,WAAK,CAAC,gBAAgB,CAAC,cAAc,EAAE,YAAY;;AAElD,aAAK,CAAC,mBAAmB,GAAG,CAAC,KAAK,CAAC,mBAAmB,CAAC;OACvD,CAAC,CAAC;KACH;GACD,CAAC;CACF,CAAC,CAAC","file":"TabularDataWidgetDirective.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc directive\n * @name Directives.tabularDataWidget\n * @restrict E\n *\n * @description This directive is for the tabular data widget.\n *\n * - ##columns:\n * An Array with the following structure:\n * <pre>[\n *     {\n *         displayName: String, label that is going to be displayed in the header.\n *         field:       String, id of this column.\n *         width:       Number, the width of the column (in percentage).\n *                      // The default width will be 100/number of columns.\n *         enableColumnResizing:   true, to enable column resizing on a column.\n *                                 // The default value is false.\n *         enableColumnReordering: true, to enable column reordering on a column.\n *                                 // The default value is false.\n *                                 // Note: setting it true on a column will allow the\n *                                 // column to be dragged to other reorder-enabled\n *                                 // column and vice versa.\n *         enableColumnSorting:    true, to enable column sorting based on a column.\n *                                 // The default value is false.\n *         defaultSortColumn:      true, to set the default column to sort on.\n *                                 // The default value is false.\n *         renderer:     the template responsible for rendering the column.\n *         cellRenderer: the template responsible for rendering cells of the columns.\n *                       // The concept is similar to 'renderer'\n *                       // but in this case it is dynamic and\n *                       // can be used to handle scenarios of edit cell etc.\n *         isFixedWidth: true, if column width needs to be fixed.\n *     },\n *     {\n *         ... // Another column\n *     },\n * ];</pre>\n *\n * - ##data:\n * An Array of the following structure:\n * <pre>[\n *     {\n *         <String, matching 'field' in the column>: String, content of the cell.\n *         ... // For each column, you need to supply a key/pair value\n *         linkUrl: String, link for the href if linkPresent is set to true.\n *     },\n *     {\n *         // Another row of the table\n *     },\n * ];</pre>\n *\n * - ##customVars:\n *       The object that holds any variables that is needed across multiple renderers,\n *       supplied from the caller of this directive.\n *\n * ##Dependencies\n *\n * @example\n * <doc:example>\n *   <doc:source>\n * \t\t<tabular-data-widget columns=\"Object\" data=\"Object\" sorting=\"String\" order=\"String\" column=\"String\" sort-change=\"Function\"  />\n *   </doc:source>\n * </doc:example>\n *\n */\nangular.module('plm360.tabularDataWidget').directive('tabularDataWidget', function ($compile) {\n\treturn {\n\t\tpriority: 100,\n\t\trestrict: 'E',\n\t\tcontroller: 'TabularDataWidgetController',\n\t\treplace: true,\n\t\tscope: {\n\t\t\ttableColumns: '=columns',\n\t\t\ttableData: '=data',\n\t\t\tperformAction: '&',\n\t\t\tcustomVars: '='\n\t\t},\n\t\ttemplateUrl: 'components/tabularDataWidget/tabularDataWidget.html',\n\t\tlink: function (scope, element, attrs, TabularDataWidgetController) {\n\n\t\t\t// This property is only added to the scope for the purpose of detecting when this directive is rendered.\n\t\t\t// We can detect that by using this property in the template associated with this directive and then use\n\t\t\t// {@link Attribute#$observe} on it. For more details please see {@link TableColumnResize}\n\t\t\t// scope.$isRendered = true;\n\t\t\tscope.$watchCollection('tableColumns', function () {\n\t\t\t\t// Changing this guy to allow call for rerendering of columns and headers\n\t\t\t\tscope.$isTableDataChanged = !scope.$isTableDataChanged;\n\t\t\t});\n\t\t}\n\t};\n});\n"]}