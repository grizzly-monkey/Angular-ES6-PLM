{"version":3,"sources":["../../../components/tabularDataWidget/TableColumnResize.js"],"names":[],"mappings":"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","file":"TableColumnResize.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc directive\n * @name Directives.tableColumnResize\n * @restrict A\n *\n * @description A feature of tabular data widget to support column resizing. This should be used with {@link TabularDataWidgetDirective}.\n * The concept is based on ng-grid.\n *\n * ##Dependencies\n * - Requires {@link Controllers/Controller.TabularDataWidgetController}\n *\n * @example\n * <doc:example>\n *     <doc:source>\n *          <tabular-data-widget columns=\"tableColumns\" data=\"tableData\" sorting=\"server\" sort-change=\"sortChange(column, order)\"\n *              perform-action=\"openFlyoutWindow(event, row, field)\" table-column-resize />\n *     </doc:source>\n * </doc:example>\n *\n * TODO: need to revisit this directive once column re-ordering feature is implemented.\n * TODO: need to revisit this directive if we support hidding columns.\n * TODO: need to revisit this directive if we support min-width, max-width or fixed columns.\n */\nangular.module('plm360.tabularDataWidget').directive('tableColumnResize', [\n\t'$document',\n\t'$compile',\n\t'$q',\n\tfunction ($document, $compile, $q) {\n\t\t/**\n\t\t * @ngdoc property\n\t\t * @name Directives.tableColumnResize#resizeOverlay\n\t\t * @propertyOf Directives.tableColumnResize\n\t\t * @description a resizeOverlay element that will be added to the table component when resize is in-process.\n\t\t */\n\t\tvar resizeOverlay = angular.element('<div class=\"resize-overlay\"></div>');\n\n\t\t/**\n\t\t * @ngdoc method\n\t\t * @name Directives.tableColumnResize#getAdjacentColumnIndex\n\t\t * @methodOf Directives.tableColumnResize\n\t\t * @description Find an index of the adjacent 'non-fixed' column based on the given start index.\n\t\t *\n\t\t * @param {Object[]} columnList : List of columns\n\t\t * @param {Number} startIndex : index from where the search will begin.\n\t\t *\n\t\t * @returns {Number/null} index of the adjacent column. Null in case no column found.\n\t\t */\n\t\tvar getAdjacentColumnIndex = function (columnList, startIndex) {\n\t\t\tif (columnList.length <= 1 || startIndex < 0 || startIndex >= columnList.length) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tfor (var i = startIndex + 1; i < columnList.length; i++) {\n\t\t\t\t\tif (columnList[i].isFixedWidth !== true) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (i = startIndex - 1; i >= 0; i--) {\n\t\t\t\t\tif (columnList[i].isFixedWidth !== true) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tpriority: 1,\n\t\t\trestrict: 'A',\n\t\t\treplace: true,\n\t\t\trequire: '^tabularDataWidget',\n\t\t\tlink: function (scope, element, attrs, tabularDataWidgetCtrl) {\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name Directives.tableColumnResize#resizerStartX\n\t\t\t\t * @propertyOf Directives.tableColumnResize\n\t\t\t\t * @description keep the starting position of the resizer when resizing process started.\n\t\t\t\t */\n\t\t\t\tscope.resizerStartX = 0;\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name Directives.tableColumnResize#resizerCurrentX\n\t\t\t\t * @propertyOf Directives.tableColumnResize\n\t\t\t\t * @description keep the current position of the resizer during resizing process.\n\t\t\t\t */\n\t\t\t\tscope.resizerCurrentX = 0;\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name Directives.tableColumnResize#currentColumnIndex\n\t\t\t\t * @propertyOf Directives.tableColumnResize\n\t\t\t\t * @description keep the current column index during resizing process.\n\t\t\t\t */\n\t\t\t\tscope.currentColumnIndex = -1;\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name Directives.tableColumnResize#tableLeft\n\t\t\t\t * @propertyOf Directives.tableColumnResize\n\t\t\t\t * @description reference of the left position of the table component.\n\t\t\t\t */\n\t\t\t\tscope.tableLeft = 0;\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name Directives.tableColumnResize#columnHeaderElementList\n\t\t\t\t * @propertyOf Directives.tableColumnResize\n\t\t\t\t * @description list of column header elements.\n\t\t\t\t */\n\t\t\t\tscope.columnHeaderElementList = null;\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc property\n\t\t\t\t * @name Directives.tableColumnResize#resizerList\n\t\t\t\t * @propertyOf Directives.tableColumnResize\n\t\t\t\t * @description list of resizers associated with the table header columns.\n\t\t\t\t */\n\t\t\t\tscope.resizerList = [];\n\n\t\t\t\t// observe function will be called on next digest cycle after compilation, ensuring that the DOM is ready.\n\t\t\t\t// In order to use this way of finding whether DOM is ready, we need to observe a scope property used by TDW in its template.\n\t\t\t\tattrs.$observe('tableRender', function (value) {\n\t\t\t\t\ttriggerInit();\n\t\t\t\t});\n\n\t\t\t\tscope.$watch(attrs.columns, function () {\n\t\t\t\t\t// TODO: use watch to update resizers whenever columns are changed. Will be needed when we support re-ordering.\n\t\t\t\t});\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc method\n\t\t\t\t * @name Directives.tableColumnResize#triggerInit\n\t\t\t\t * @methodOf Directives.tableColumnResize\n\t\t\t\t * @description Initialization function\n\t\t\t\t */\n\t\t\t\tvar triggerInit = function () {\n\t\t\t\t\telement.addClass('resizable-columns');\n\t\t\t\t\tscope.columnHeaderElementList = element.find('th');\n\n\t\t\t\t\tvar columnList = tabularDataWidgetCtrl.getColumnList();\n\n\t\t\t\t\t// Add resizer to the columns that supports resizing.\n\t\t\t\t\tfor (var i = 0; i < columnList.length; i++) {\n\t\t\t\t\t\tif (columnList[i].enableColumnResizing !== true) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar columnEl = scope.columnHeaderElementList.eq(i);\n\n\t\t\t\t\t\tvar resizerEl = angular.element('<div class=\"column-resizer\" position=\"right\">');\n\t\t\t\t\t\tresizerEl.prop('column-index', i);\n\t\t\t\t\t\tcolumnEl.append(resizerEl);\n\t\t\t\t\t\t$compile(resizerEl);\n\n\t\t\t\t\t\tscope.resizerList.push(resizerEl);\n\n\t\t\t\t\t\tresizerEl.on('mousedown', function (event, args) {\n\t\t\t\t\t\t\tevent.stopPropagation();\n\n\t\t\t\t\t\t\t// Get the left offset of the table\n\t\t\t\t\t\t\tscope.tableLeft = element[0].getBoundingClientRect().left;\n\t\t\t\t\t\t\t// Get the starting X position, which is the X coordinate of the click minus the table's offset\n\t\t\t\t\t\t\tscope.resizerStartX = event.clientX - scope.tableLeft;\n\n\t\t\t\t\t\t\tscope.currentColumnIndex = event.currentTarget['column-index'];\n\n\t\t\t\t\t\t\t// Append the resizer overlay\n\t\t\t\t\t\t\telement.append(resizeOverlay);\n\t\t\t\t\t\t\t// Place the resizer overlay at the start position\n\t\t\t\t\t\t\tresizeOverlay.css({left: scope.resizerStartX + 'px'});\n\n\t\t\t\t\t\t\t// Add handlers for mouse move and up events\n\t\t\t\t\t\t\t$document.on('mouseup', mouseUp);\n\t\t\t\t\t\t\t$document.on('mousemove', mouseMove);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc method\n\t\t\t\t * @name Directives.tableColumnResize#mouseMove\n\t\t\t\t * @methodOf Directives.tableColumnResize\n\t\t\t\t * @description mouse move event handler. It will update the position of the resize overlay.\n\t\t\t\t *\n\t\t\t\t * @params {Object} event event object associated with the mouse move event.\n\t\t\t\t * @params {Object} args arguments associated with the event.\n\t\t\t\t */\n\t\t\t\tfunction mouseMove(event, args) {\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\tscope.resizerCurrentX = event.clientX - scope.tableLeft;\n\n\t\t\t\t\tif (scope.resizerCurrentX < 0) {\n\t\t\t\t\t\tscope.resizerCurrentX = 0;\n\t\t\t\t\t} else if (scope.resizerCurrentX > element[0].getBoundingClientRect().width) {\n\t\t\t\t\t\tscope.resizerCurrentX = element[0].getBoundingClientRect().width;\n\t\t\t\t\t}\n\t\t\t\t\t// move resize overlay's position\n\t\t\t\t\tresizeOverlay.css({left: scope.resizerCurrentX + 'px'});\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * @ngdoc method\n\t\t\t\t * @name Directives.tableColumnResize#mouseUp\n\t\t\t\t * @methodOf Directives.tableColumnResize\n\t\t\t\t * @description mouse up event handler. It will update the width of the columns.\n\t\t\t\t *\n\t\t\t\t * @params {Object} event event object associated with the mouse up event.\n\t\t\t\t * @params {Object} args arguments associated with the event.\n\t\t\t\t */\n\t\t\t\tfunction mouseUp(event, args) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tresizeOverlay.remove();\n\n\t\t\t\t\t// Resize the column\n\t\t\t\t\tscope.resizerCurrentX = event.clientX - scope.tableLeft;\n\t\t\t\t\tvar xDiff = scope.resizerCurrentX - scope.resizerStartX;\n\n\t\t\t\t\tif (xDiff === 0) {\n\t\t\t\t\t\t$document.off('mouseup', mouseUp);\n\t\t\t\t\t\t$document.off('mousemove', mouseMove);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The other column to resize (the one next to this one)\n\t\t\t\t\tvar col = scope.columnHeaderElementList.eq(scope.currentColumnIndex);\n\n\t\t\t\t\t// Get the new width\n\t\t\t\t\tvar newWidth = col[0].getBoundingClientRect().width + xDiff;\n\n\t\t\t\t\tvar newWidthInPercentage = Math.floor((newWidth / element[0].getBoundingClientRect().width) * 100);\n\t\t\t\t\tcol.css('width', newWidthInPercentage + '%');\n\n\t\t\t\t\tvar columnToAdjust = getAdjacentColumnIndex(scope.columnHeaderElementList, scope.currentColumnIndex);\n\n\t\t\t\t\tif (columnToAdjust) {\n\t\t\t\t\t\tvar newWidthForAdjacentCol = (scope.columnHeaderElementList[columnToAdjust].getBoundingClientRect().width - xDiff);\n\t\t\t\t\t\tvar newWidthForAdjacentColInPercentage = Math.floor((newWidthForAdjacentCol / element[0].getBoundingClientRect().width) * 100);\n\n\t\t\t\t\t\tscope.columnHeaderElementList.eq(columnToAdjust).css('width', newWidthForAdjacentColInPercentage + '%');\n\t\t\t\t\t}\n\n\t\t\t\t\t$document.off('mouseup', mouseUp);\n\t\t\t\t\t$document.off('mousemove', mouseMove);\n\t\t\t\t}\n\n\t\t\t\tscope.$on('$destroy', function () {\n\t\t\t\t\tfor (var i = 0; i < scope.resizerList.length; i++) {\n\t\t\t\t\t\tscope.resizerList[i].off('mousedown');\n\t\t\t\t\t\tscope.resizerList[i].remove();\n\t\t\t\t\t}\n\t\t\t\t\tscope.resizerList = null;\n\n\t\t\t\t\t$document.off('mousemove', mouseMove);\n\t\t\t\t\t$document.off('mouseup', mouseUp);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n]);\n"]}