{"version":3,"sources":["../../../components/tabularDataWidget/TabularDataWidgetController.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AAUb,OAAO,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC,UAAU,CAAC,6BAA6B,EAAE,CACpF,QAAQ,EACR,GAAG,EACH,MAAM,EACN,UAAU,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE;;;;;;;;AAQ1B,KAAI,IAAI,GAAG,IAAI,CAAC;;;;;;;;;;AAUhB,KAAI,CAAC,aAAa,GAAG,YAAY;AAChC,SAAO,MAAM,CAAC,YAAY,CAAC;EAC3B,CAAC;;;;;;;;;;;;;;;;AAgBF,KAAI,CAAC,cAAc,GAAG,UAAU,cAAc,EAAE,mBAAmB,EAAE;AACpE,MAAI,iBAAiB,GAAG,CAAC,CAAC,CAAC;AAC3B,MAAI,sBAAsB,GAAG,CAAC,CAAC,CAAC;;AAEhC,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;AAC7D,OAAI,MAAM,CAAC,KAAK,KAAK,cAAc,EAAE;AACpC,qBAAiB,GAAG,CAAC,CAAC;AACtB,UAAM;IACN;GACD;;AAED,OAAK,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,IAAI,EAAE,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;AAChE,OAAI,MAAM,CAAC,KAAK,KAAK,mBAAmB,EAAE;AACzC,0BAAsB,GAAG,CAAC,CAAC;AAC3B,UAAM;IACN;GACD;;AAED,MAAI,iBAAiB,IAAI,CAAC,IAAI,sBAAsB,IAAI,CAAC,EAAE;AAC1D,SAAM,CAAC,UAAU,CAAC,YAAY;AAC7B,QAAI,OAAO,GAAG,MAAM,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC;AACrD,UAAM,CAAC,YAAY,CAAC,iBAAiB,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC;AACrF,UAAM,CAAC,YAAY,CAAC,sBAAsB,CAAC,GAAG,OAAO,CAAC;IACtD,CAAC,CAAC;GACH,MAAM;AACN,OAAI,CAAC,KAAK,CAAC,+EAA+E,CAAC,CAAC;GAC5F;EACD,CAAC;;;;;;;;;;;;AAYF,OAAM,CAAC,eAAe,GAAG,UAAU,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE;AACrD,QAAM,CAAC,aAAa,CAAC;AACpB,QAAK,EAAE,KAAK;AACZ,MAAG,EAAE,GAAG;AACR,QAAK,EAAE,KAAK;GACZ,CAAC,CAAC;EACH,CAAC;;;;;;;;;;;;;AAaF,OAAM,CAAC,YAAY,GAAG,UAAU,QAAQ,EAAE,aAAa,EAAE;;;;AAIxD,SAAO,MAAM,CAAC,QAAQ,CAAC,KAAK,MAAM,CAAC,aAAa,CAAC,CAAC;EAClD,CAAC;;;;;;;;;;;;AAYF,OAAM,CAAC,QAAQ,GAAG,UAAU,MAAM,EAAE;AACnC,MAAI,CAAC,MAAM,CAAC,KAAK,EAAE;AAClB,UAAO,EAAE,CAAC;GACV,MAAM,IAAI,MAAM,CAAC,YAAY,KAAK,IAAI,EAAE;;AACxC,UAAO,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;GAC3B;;AAED,SAAO,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;EAC1B,CAAC;CACF,CACD,CAAC,CAAC","file":"TabularDataWidgetController.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Controllers.TabularDataWidgetController\n * @description This controller corresponds to the Tabular Data Widget Directive.\n *\n * See {@link Directives.tabularDataWidget}.\n */\n\nangular.module('plm360.tabularDataWidget').controller('TabularDataWidgetController', [\n\t'$scope',\n\t'_',\n\t'$log',\n\tfunction ($scope, _, $log) {\n\t\t/**\n\t\t * @ngdoc property\n\t\t * @name Controllers.TabularDataWidgetController#that\n\t\t * @propertyOf Controllers.TabularDataWidgetController\n\t\t * @description `private` Reference to the controller.\n\t\t *\n\t\t */\n\t\tvar that = this;\n\n\t\t/**\n\t\t * @ngdoc method\n\t\t * @name Controllers.TabularDataWidgetController#getColumnList\n\t\t * @methodOf Controllers.TabularDataWidgetController\n\t\t * @description The list of columns, i.e. column headers.\n\t\t *\n\t\t * @returns {Object []} The list of column headers.\n\t\t */\n\t\tthat.getColumnList = function () {\n\t\t\treturn $scope.tableColumns;\n\t\t};\n\n\t\t/**\n\t\t * @ngdoc method\n\t\t * @name Controllers.TabularDataWidgetController#reOrderColumns\n\t\t * @methodOf Controllers.TabularDataWidgetController\n\t\t * @description Re-order columns according to the given column IDs.\n\t\t *\n\t\t * @param {String} sourceColumnId\t\tThe ID of the source column.\n\t\t *\n\t\t * Note: ID is another name of <code>field</code> property when used to uniquely identify column.\n\t\t *\n\t\t * @param {String} destinationColumnId\tThe ID of the destination column.\n\t\t *\n\t\t * Note: ID is another name of <code>field</code> property when used to uniquely identify column.\n\t\t */\n\t\tthat.reOrderColumns = function (sourceColumnId, destinationColumnId) {\n\t\t\tvar sourceColumnIndex = -1;\n\t\t\tvar destinationColumnIndex = -1;\n\n\t\t\tfor (var i = 0, column; column = $scope.tableColumns[i]; i++) {\n\t\t\t\tif (column.field === sourceColumnId) {\n\t\t\t\t\tsourceColumnIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (i = 0, column = null; column = $scope.tableColumns[i]; i++) {\n\t\t\t\tif (column.field === destinationColumnId) {\n\t\t\t\t\tdestinationColumnIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (sourceColumnIndex >= 0 && destinationColumnIndex >= 0) {\n\t\t\t\t$scope.$evalAsync(function () {\n\t\t\t\t\tvar tempCol = $scope.tableColumns[sourceColumnIndex];\n\t\t\t\t\t$scope.tableColumns[sourceColumnIndex] = $scope.tableColumns[destinationColumnIndex];\n\t\t\t\t\t$scope.tableColumns[destinationColumnIndex] = tempCol;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t$log.error('Column reordering failed as source column or destination column is not found.');\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @ngdoc method\n\t\t * @name Controller.TabularDataWidgetController#actionToPerform\n\t\t * @methodOf Controllers.TabularDataWidgetController\n\t\t * @description Calls the function defined in the scope.\n\t\t *\n\t\t * @param {Object} event\tThe event object.\n\t\t * @param {Object} row\t\tThe row on which the event takes place.\n\t\t * @param {String} field\tThe field of a row on which the event takes place.\n\t\t */\n\t\t$scope.actionToPerform = function (event, row, field) {\n\t\t\t$scope.performAction({\n\t\t\t\tevent: event,\n\t\t\t\trow: row,\n\t\t\t\tfield: field\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * @ngdoc method\n\t\t * @name Controllers.TabularDataWidgetController#isEqualValue\n\t\t * @methodOf Controllers.TabularDataWidgetController\n\t\t * @description Compare whether the two are equal.\n\t\t *\n\t\t * @param {String} newValue\t\t\tThe new value that is changed to.\n\t\t * @param {String} originalValue\tThe original value.\n\t\t *\n\t\t * @return {Boolean} True if both values are equal in content.\n\t\t */\n\t\t$scope.isEqualValue = function (newValue, originalValue) {\n\t\t\t// var tmpNewValue = newValue.replace(/[^\\w]/g, '');\n\t\t\t// var tmpOriginalValue = originalValue.replace(/[^\\w]/g, '');\n\t\t\t// return tmpNewValue == tmpOriginalValue;\n\t\t\treturn String(newValue) === String(originalValue);\n\t\t};\n\n\t\t/**\n\t\t * @ngdoc method\n\t\t * @name Controllers.TabularDataWidgetController#getWidth\n\t\t * @methodOf Controllers.TabularDataWidgetController\n\t\t * @description Calculate width based on the column's config options.\n\t\t *\n\t\t * @param {Object} column An object containing the column's configuration options.\n\t\t *\n\t\t * @return {String} Width of the column.\n\t\t */\n\t\t$scope.getWidth = function (column) {\n\t\t\tif (!column.width) {\n\t\t\t\treturn '';\n\t\t\t} else if (column.isFixedWidth === true) { // Use pixel width if column is fixed\n\t\t\t\treturn column.width + 'px';\n\t\t\t}\n\n\t\t\treturn column.width + '%';\n\t\t};\n\t}\n]);\n"]}