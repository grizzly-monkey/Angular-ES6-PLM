{"version":3,"sources":["../../../components/plmHeader/PLMHeaderController.js"],"names":[],"mappings":"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","file":"PLMHeaderController.js","sourcesContent":["'use strict';\n\n/**\n * @ngdoc object\n * @name Controllers.PLMHeaderController\n *\n * @description This controller is the application header,\n * present in almost all pages.\n *\n * ##Dependencies\n *\n */\nangular.module('plm360.plmHeader').controller('PLMHeaderController', [\n\t'$rootScope',\n\t'$scope',\n\t'$state',\n\t'$stateParams',\n\t'$window',\n\t'$mdDialog',\n\t'$log',\n\t'$filter',\n\t'$q',\n\t'AuthenticationService',\n\t'EventService',\n\t'LocalizationService',\n\t'ModelsManager',\n\t'PLMPermissions',\n\t'_',\n\t'RESTWrapperService',\n\t'$location',\n\tfunction ($rootScope, $scope, $state, $stateParams, $window, $mdDialog, $log, $filter, $q, AuthenticationService, EventService, LocalizationService, ModelsManager, PLMPermissions, _, RESTWrapperService, $location) {\n\n\t\t/**\n\t\t * @ngdoc property\n\t\t * @name Controllers.PLMHeaderController#workspaceId\n\t\t * @propertyOf Controllers.PLMHeaderController\n\t\t * @description The workspace id\n\t\t */\n\t\t$scope.workspaceId = $stateParams.workspaceId;\n\n\t\t/**\n\t\t * @ngdoc property\n\t\t * @name Controllers.PLMHeaderController#headerText\n\t\t * @propertyOf Controllers.PLMHeaderController\n\t\t * @description The title of the page (label that will go at the top)\n\t\t */\n\t\t$scope.headerText = '';\n\n\t\t/**\n\t\t * @ngdoc property\n\t\t * @name Controllers.PLMHeaderController#currentWorkspace\n\t\t * @propertyOf Controllers.PLMHeaderController\n\t\t * @description The current workspace object, if in workspace context\n\t\t */\n\t\t$scope.currentWorkspace = null;\n\n\t\t/**\n\t\t * @ngdoc property\n\t\t * @name Controllers.PLMHeaderController#searchQuery\n\t\t * @propertyOf Controllers.PLMHeaderController\n\t\t * @description Holds the value in the query param of the url\n\t\t * for the search PLM directive\n\t\t */\n\t\t$scope.searchQuery = null;\n\n\t\t/**\n\t\t * @ngdoc property\n\t\t * @name Controllers.PLMHeaderController#workspaceErrorListenerId\n\t\t * @propertyOf Controllers.PLMHeaderController\n\t\t * @description The reference of the workspaces errors listener\n\t\t */\n\t\tvar workspaceErrorListenerId = '';\n\n\t\t/**\n\t\t * @ngdoc property\n\t\t * @name Controllers.PLMHeaderController#workspaceTypeId\n\t\t * @propertyOf Controllers.PLMHeaderController\n\t\t * @description `private` Stores the current workspace type id that is loaded\n\t\t */\n\t\tvar workspaceTypeId = '';\n\n\t\t/**\n\t\t * @ngdoc property\n\t\t * @name Controllers.PLMHeaderController#itemListenerId\n\t\t * @propertyOf Controllers.PLMHeaderController\n\t\t * @description `private` Stores the listener for the item data\n\t\t */\n\t\tvar itemListenerId = '';\n\n\t\t/**\n\t\t * @ngdoc property\n\t\t * @name Controllers.PLMHeaderController#isAddItemPage\n\t\t * @propertyOf Controllers.PLMHeaderController\n\t\t * @description `private` Stores the listener for the item data\n\t\t */\n\t\t$scope.isAddItemPage = null;\n\n\t\t// initialize localization bundle\n\t\t// this caused the script to halt, causing reload to not load revisions\n\t\tvar localizationPromise = LocalizationService.init().then(function () {\n\t\t\t$scope.bundle = $rootScope.bundle;\n\t\t\t$scope.createBtnTooltip = $rootScope.bundle.create.createNewItem;\n\t\t});\n\n\t\t// Listens for workspace loading\n\t\tvar workspaceListenerId = EventService.listen('workspaceInstance:*:done', function (event, workspaceObj) {\n\t\t\tif (workspaceObj.getId() === $stateParams.workspaceId) {\n\t\t\t\t// Sets current workspace\n\t\t\t\t$scope.currentWorkspaceObj = workspaceObj;\n\n\t\t\t\t// Re-assigns the workspaceId variable\n\t\t\t\t$scope.workspaceId = workspaceObj.getId();\n\n\t\t\t\t// Sets the header text (plain workspace name if in workspace items list, or item),\n\t\t\t\t// otherwise user is at the add item page, hence append the workspace name\n\t\t\t\t// to the header text\n\t\t\t\tif (angular.isDefined($stateParams.pageTitle)) {\n\t\t\t\t\t// The following check is necessary (albeit ugly) to avoid appending the workspace name\n\t\t\t\t\t// multiple times to the header text, when the user interrupts browsing from\n\t\t\t\t\t// one page to another, or the pages loads very quickly\n\t\t\t\t\tif ($scope.headerText.indexOf(workspaceObj.getDisplayName()) === -1) {\n\t\t\t\t\t\t$scope.headerText += ' ' + workspaceObj.getDisplayName();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$scope.headerText = workspaceObj.getDisplayName();\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\n\t\t/**\n\t\t * @ngdoc method\n\t\t * @name Controllers.PLMHeaderController#setUpPageHeader\n\t\t * @methodOf Controllers.PLMHeaderController\n\t\t * @description `private` Sets up the header\n\t\t * (e.g. title set in the app.js if it's available in the route params,\n\t\t * plus buttons and other dropdowns)\n\t\t */\n\t\tvar setUpPageHeader = function () {\n\n\t\t\t// If it's in the add item page, set up the var as to hide some elements from view\n\t\t\t$scope.isAddItemPage = $location.path().indexOf('/addItem') > -1;\n\n\t\t\t// make sure localization bundle is loaded\n\t\t\tlocalizationPromise.then(function () {\n\n\t\t\t\t// Custom title, from app definition\n\t\t\t\tif (angular.isDefined($stateParams.pageTitle)) {\n\n\t\t\t\t\t// Resets current workspace\n\t\t\t\t\t$scope.currentWorkspace = null;\n\n\t\t\t\t\t// Find the key in localization\n\t\t\t\t\t$scope.headerText = $stateParams.pageTitle.split('.').reduce(function (obj, i) {\n\t\t\t\t\t\treturn obj[i];\n\t\t\t\t\t}, $rootScope.bundle);\n\n\t\t\t\t\t// If adding an item, triggers the loading of workspace information,\n\t\t\t\t\t// so the workspace name will be appended to the header text\n\t\t\t\t\tif (angular.isDefined($stateParams.workspaceId)) {\n\t\t\t\t\t\tModelsManager.getWorkspace($stateParams.workspaceId);\n\t\t\t\t\t}\n\n\t\t\t\t} else { // Dynamic title (workspace or item)\n\n\t\t\t\t\t$scope.currentWorkspace = null;\n\n\t\t\t\t\t// If looking at workspace items list (not in an item)\n\t\t\t\t\tif (angular.isDefined($stateParams.workspaceId)) {\n\n\t\t\t\t\t\tModelsManager.getWorkspace($stateParams.workspaceId);\n\n\t\t\t\t\t\t// Listens for a permission error when loading information from the workspace\n\t\t\t\t\t\tworkspaceErrorListenerId = EventService.listen('workspaceInstance:' + $stateParams.workspaceId + ':permissionError', function (event, errorObj) {\n\t\t\t\t\t\t\t// Blanks out the name, in case the user arrived back at this workspace after the permission was revoked\n\t\t\t\t\t\t\t// by means other than reloading the page\n\t\t\t\t\t\t\t// NOTE: see this method on ModelsManager - we have to handle this more gracefully in another user story\n\t\t\t\t\t\t\t$scope.headerText = '';\n\t\t\t\t\t\t});\n\n\t\t\t\t\t} else { // This state should not exist, but just catching it here as a warning\n\t\t\t\t\t\t$log.warn('This state should not exist - something\\'s wrong with the workspaceId or itemId?');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Listens for whenever a new content or view has been loaded in the\n\t\t// Note: whenever a pageTitle has been set in the route, it will take precedence\n\t\t// over workspaceId and itemId-set titles\n\t\tEventService.listen('contentLoad:done', setUpPageHeader);\n\t\tEventService.listen('viewLoad:done', setUpPageHeader);\n\n\t\t// This will run only once, for the first time, the the header has finished loading (for whenever the user        \n\t\t// reloads the page). This will probably go away once we sort out all changes to the routes\n\t\t$scope.$evalAsync(function (event) {        \n\t\t\tEventService.send('contentLoad:done');        \n\t\t});\n\n\t\t// Unlistens to events when removing this directive\n\t\t$scope.$on('$destroy', function () {\n\t\t\tEventService.unlisten(workspaceErrorListenerId);\n\t\t});\n\t}\n]);\n"]}